# requirements.txt
pyautogui>=0.9.54
pygetwindow>=0.0.9
pillow>=9.0.0
pandas>=1.3.0
numpy>=1.21.0
pathlib
datetime

# Para desarrollo y debugging (opcional)
opencv-python>=4.5.0
matplotlib>=3.5.0

# Script de instalaci√≥n (install_dependencies.py)
"""
Script para instalar las dependencias necesarias
Ejecutar: python install_dependencies.py
"""

import subprocess
import sys
import os

def install_package(package):
    """Instala un paquete usando pip"""
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", package])
        print(f"‚úÖ {package} instalado correctamente")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error instalando {package}: {e}")
        return False

def main():
    print("="*50)
    print("INSTALADOR DE DEPENDENCIAS - SONEL EXTRACTOR")
    print("="*50)
    
    # Lista de paquetes requeridos
    required_packages = [
        "pyautogui>=0.9.54",
        "pygetwindow>=0.0.9",
        "pillow>=9.0.0",
        "pandas>=1.3.0",
        "numpy>=1.21.0"
    ]
    
    # Paquetes opcionales para debugging
    optional_packages = [
        "opencv-python>=4.5.0",
        "matplotlib>=3.5.0"
    ]
    
    print("Instalando paquetes requeridos...")
    success_count = 0
    
    for package in required_packages:
        if install_package(package):
            success_count += 1
    
    print(f"\n‚úÖ {success_count}/{len(required_packages)} paquetes requeridos instalados")
    
    # Preguntar por paquetes opcionales
    install_optional = input("\n¬øInstalar paquetes opcionales para debugging? (s/N): ").lower().strip()
    
    if install_optional in ['s', 'si', 's√≠', 'y', 'yes']:
        print("\nInstalando paquetes opcionales...")
        for package in optional_packages:
            install_package(package)
    
    print("\nüèÅ Instalaci√≥n completada")
    print("\nPuedes ejecutar el extractor con: python main_extractor.py")

if __name__ == "__main__":
    main()

# Gu√≠a de instalaci√≥n manual (INSTALL.md)
# =====================================

# GU√çA DE INSTALACI√ìN - SONEL EXTRACTOR

## Requisitos previos
- Python 3.7 o superior
- Sonel Analysis instalado en el sistema
- Resoluci√≥n de pantalla: 1920x1080 (importante para las coordenadas)

## Instalaci√≥n autom√°tica
1. Ejecutar el script de instalaci√≥n:
   ```bash
   python install_dependencies.py
   ```

## Instalaci√≥n manual
1. Instalar dependencias:
   ```bash
   pip install pyautogui pygetwindow pillow pandas numpy
   ```

2. Para debugging (opcional):
   ```bash
   pip install opencv-python matplotlib
   ```

## Estructura de directorios
Crear la siguiente estructura:
```
sonel_extractor/
‚îú‚îÄ‚îÄ archivos_pqm/          # Colocar archivos .pqm702 aqu√≠
‚îú‚îÄ‚îÄ csv_generados/         # Los CSV se generar√°n aqu√≠
‚îú‚îÄ‚îÄ logs/                  # Logs del sistema
‚îî‚îÄ‚îÄ temp/                  # Archivos temporales
```

## Configuraci√≥n
1. Editar `config/settings.py` si es necesario
2. Verificar la ruta de Sonel Analysis en `sonel_exe_path`
3. Ajustar coordenadas si la resoluci√≥n es diferente

## Uso
1. Colocar archivos .pqm702 en la carpeta `archivos_pqm/`
2. Ejecutar: `python main_extractor.py`
3. Los CSV se generar√°n en `csv_generados/`

## Troubleshooting
- Si fallan los clics, verificar resoluci√≥n de pantalla
- Si no encuentra Sonel Analysis, verificar la ruta en settings.py
- Si hay errores de timing, ajustar los delays en la configuraci√≥n

## Limitaciones
- Requiere resoluci√≥n 1920x1080
- No usar el mouse durante la ejecuci√≥n
- Un archivo a la vez (el software se abre y cierra para cada archivo)