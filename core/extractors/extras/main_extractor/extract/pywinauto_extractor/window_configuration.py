import re
import time
import logging
import os
import traceback
import pyautogui
import pyperclip
from time import sleep
from datetime import datetime
from pywinauto import Desktop, mouse, findwindows
from pywinauto import Application
from pyautogui import click, moveTo, position
from pywinauto.mouse import move
from pywinauto.keyboard import send_keys
from pynput.mouse import Button, Listener as MouseListener
from pywinauto.controls.uia_controls import EditWrapper, ButtonWrapper
from config.logger import logger

class SonelConfiguracion:
    """Clase especializada para manejar la vista de configuraci√≥n"""
    
    def __init__(self, parent_extractor):
        """
        Inicializa la clase con referencia al extractor principal
        
        Args:
            parent_extractor: Instancia del PywinautoExtractor principal
        """
        self.parent_extractor = parent_extractor
        self.archivo_pqm = parent_extractor.archivo_pqm
        self.ruta_exe = parent_extractor.sonel_exe_path
        self.delays = parent_extractor.delays

        self.app = None
        self.ventana_configuracion = None
        self.main_window = None

    def conectar(self, app_reference=None):
        """Conecta con la vista de configuraci√≥n"""
        try:
            logger.info("üîç Conectando con vista de configuraci√≥n...")
            
            if app_reference:
                self.app = app_reference
            
            if not self.app:
                # Fallback: conectar directamente si no hay referencia
                self.app = Application(backend="uia").connect(title_re=".*An√°lisis.*")
            
            # Esperar a que aparezca la ventana de configuraci√≥n
            time.sleep(2)
            
            # Buscar ventana que termine en "Configuraci√≥n 1"
            main_window = self.app.top_window()
            windows = main_window.descendants(control_type="Window")
            self.main_window = main_window
            
            for window in windows:
                try:
                    title = window.window_text()
                    if ("An√°lisis" in title and ".pqm" in title and title.strip() 
                        and title.strip().endswith("Configuraci√≥n 1")):
                        self.ventana_configuracion = window
                        logger.info(f"‚úÖ Vista configuraci√≥n encontrada: {title}")
                        return True
                except Exception:
                    continue
            
            # Fallback: verificar ventana principal
            main_title = main_window.window_text()
            if ("An√°lisis" in main_title and ".pqm" in main_title and main_title.strip() 
                and main_title.strip().endswith("Configuraci√≥n 1")):
                self.ventana_configuracion = main_window
                logger.info(f"‚úÖ Vista configuraci√≥n (main): {main_title}")
                return True
            
            logger.error("‚ùå No se encontr√≥ vista de configuraci√≥n")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error conectando configuraci√≥n: {e}")
            return False

    def extraer_navegacion_lateral(self):
        """Extrae y activa elementos de navegaci√≥n lateral (Mediciones)"""
        try:
            logger.info("üß≠ Extrayendo navegaci√≥n lateral...")
            
            mediciones_encontradas = {}
            index = 0
            
            for tipo_control in ["CheckBox", "Button", "Text", "TreeItem"]:
                try:
                    controles = self.ventana_configuracion.descendants(control_type=tipo_control)
                    
                    for control in controles:
                        texto = control.window_text().strip()
                        
                        if "Mediciones" in texto:
                            detalles = self._log_control_details(control, index, tipo_control)
                            if detalles:
                                mediciones_encontradas[f"Mediciones_{index}"] = detalles
                                index += 1
                            
                            # Activar CheckBox si es necesario
                            if tipo_control == "CheckBox":
                                try:
                                    estado = control.get_toggle_state()
                                    if estado != 1:
                                        control.click_input()
                                        time.sleep(0.5)
                                        logger.info("‚úÖ CheckBox 'Mediciones' activado")
                                except Exception as e_click:
                                    logger.warning(f"‚ö†Ô∏è Error activando CheckBox: {e_click}")
                
                except Exception:
                    continue
            
            logger.info(f"üìä Navegaci√≥n: {len(mediciones_encontradas)} elementos encontrados")
            return mediciones_encontradas
            
        except Exception as e:
            logger.error(f"‚ùå Error extrayendo navegaci√≥n: {e}")
            return {}

    def configurar_filtros_datos(self):
        """Configura filtros de datos (Usuario, Prom., etc.)"""
        try:
            logger.info("‚öôÔ∏è Configurando filtros de datos...")
            
            elementos_configurados = {}
            
            # 1. Seleccionar RadioButton "Usuario"
            radiobuttons = self.ventana_configuracion.descendants(control_type="RadioButton")
            for radio in radiobuttons:
                texto = radio.window_text().strip()
                if texto == "Usuario":
                    try:
                        estado = radio.get_toggle_state()
                        if estado != 1:
                            radio.select()
                            logger.info("‚úÖ RadioButton 'Usuario' seleccionado")
                        elementos_configurados["RadioButton_Usuario"] = "Seleccionado"
                    except Exception as e:
                        logger.error(f"‚ùå Error seleccionando 'Usuario': {e}")
            
            # 2. Configurar CheckBoxes de medici√≥n
            checkboxes_config = {
                "Prom.": True,   # Activar
                "M√≠n.": False,   # Desactivar
                "Instant.": False,  # Desactivar
                "M√°x.": False    # Desactivar
            }
            
            checkboxes = self.ventana_configuracion.descendants(control_type="CheckBox")
            for checkbox in checkboxes:
                texto = checkbox.window_text().strip()
                
                for medicion, debe_estar_activo in checkboxes_config.items():
                    if medicion in texto or texto == medicion:
                        try:
                            estado_actual = checkbox.get_toggle_state()
                            
                            if debe_estar_activo and estado_actual != 1:
                                checkbox.toggle()
                                logger.info(f"‚úÖ Activando '{texto}'")
                            elif not debe_estar_activo and estado_actual == 1:
                                checkbox.toggle()
                                logger.info(f"üö´ Desactivando '{texto}'")
                            
                            elementos_configurados[f"CheckBox_{texto}"] = "Configurado"
                            
                        except Exception as e:
                            logger.error(f"‚ùå Error configurando '{texto}': {e}")
            
            logger.info(f"üìä Filtros: {len(elementos_configurados)} elementos configurados")
            return elementos_configurados
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando filtros: {e}")
            return {}
        
    def extraer_configuracion_principal_mediciones(self):
        """
        Busca y desactiva el checkbox 'Seleccionar todo' si est√° activado,
        y hace clic en el bot√≥n 'Expandir todo'.
        """
        try:
            logger.info("\nüîß Buscando 'Seleccionar todo' y 'Expandir todo'...")

            componentes_clave = {
                "Seleccionar todo": {
                    "tipo": "CheckBox",
                    "accion": "desactivar"
                },
                "Expandir todo": {
                    "tipo": "Button",
                    "accion": "click"
                }
            }

            for control in self.ventana_configuracion.descendants():
                texto = control.window_text().strip()
                if texto in componentes_clave:
                    tipo_esperado = componentes_clave[texto]["tipo"]
                    tipo_control = control.friendly_class_name()

                    if tipo_control != tipo_esperado:
                        logger.warning(f"‚ö†Ô∏è Tipo inesperado para '{texto}': {tipo_control} (esperado: {tipo_esperado})")
                        continue

                    detalles = self._log_control_details(control, 0, tipo_control)
                    
                    if tipo_control == "CheckBox":
                        try:
                            estado = control.get_toggle_state()
                            detalles["estado_inicial"] = estado

                            if estado == 1:  # Si est√° activado
                                logger.info(f"üîÑ Desactivando checkbox '{texto}'...")
                                control.toggle()
                            else:
                                logger.info(f"‚úîÔ∏è Checkbox '{texto}' ya est√° desactivado.")
                        except Exception as e:
                            logger.error(f"‚ùå No se pudo obtener o cambiar el estado de '{texto}': {e}")

                    elif tipo_control == "Button":
                        try:
                            logger.info(f"üñ±Ô∏è Clic en el bot√≥n '{texto}'...")
                            control.click_input()
                        except Exception as e:
                            logger.error(f"‚ùå Error al hacer clic en el bot√≥n '{texto}': {e}")

        except Exception as e:
            logger.error(f"‚ùå Error general en 'desactivar_seleccionar_todo_y_expandir': {e}")

    def extraer_componentes_arbol_mediciones(self):
        """
        Extrae los componentes dentro del √°rbol de mediciones utilizando scroll inteligente
        y aplica l√≥gica de selecci√≥n a los elementos que coinciden con palabras clave.
        
        Caracter√≠sticas:
        - Scroll solo dentro del √°rea del TreeView
        - Detecci√≥n autom√°tica de nuevos elementos
        - Prevenci√≥n de bucles infinitos
        - Filtrado por palabras clave relevantes
        - Selecci√≥n autom√°tica de elementos relevantes
        - Manejo robusto de errores
        """
        try:
            logger.info("\nüå≥ === EXTRACCI√ìN Y SELECCI√ìN DE COMPONENTES DEL √ÅRBOL DE MEDICIONES ===")

            arbol_componentes = {}
            index = 0
            elementos_seleccionados = 0
            elementos_no_seleccionables = 0

            # Palabras clave que nos interesan extraer (normalizadas)
            palabras_clave = [
                "tensi√≥n u", "tensi√≥n ul-l", "tensi√≥n u l-l",
                "potencia p", "potencia q1", "potencia sn", "potencia s"
            ]

            def normalizar_texto(texto):
                """Quita etiquetas HTML y s√≠mbolos para comparaci√≥n"""
                texto = re.sub(r"<sub>(.*?)</sub>", r"\1", texto, flags=re.IGNORECASE)
                texto = re.sub(r"[<>_/]", "", texto)  # Elimina restos de etiquetas o sub√≠ndices
                return texto.lower().strip()

            def contiene_palabra_clave(texto):
                texto_normalizado = normalizar_texto(texto)
                return any(clave in texto_normalizado for clave in palabras_clave)

            def verificar_y_seleccionar_elemento(item, texto):
                """
                Verifica si el elemento es seleccionable y lo selecciona haciendo clic en el √°rea del checkbox.
                Retorna informaci√≥n sobre el estado de selecci√≥n.
                """
                nonlocal elementos_seleccionados, elementos_no_seleccionables
                
                try:
                    # Verificar si contiene palabra clave
                    if not contiene_palabra_clave(texto):
                        return {
                            'seleccionado': False,
                            'accion': 'no_es_clave',
                            'es_clave': False
                        }
                    
                    # Es palabra clave, intentar selecci√≥n
                    try:
                        # Este conjunto guarda los nombres ya seleccionados (puedes moverlo al inicio del proceso)
                        self.seleccionados_previamente = getattr(self, 'seleccionados_previamente', set())

                        # Verificamos si ya fue seleccionado anteriormente
                        if texto in self.seleccionados_previamente:
                            logger.info(f"üîÅ '{texto}' ya fue seleccionado previamente. Saltando clic.")
                            return {
                                'seleccionado': True,
                                'accion': 'ya_seleccionado',
                                'coordenadas': None,
                                'estado_previo': None,
                                'es_clave': True,
                                'metodo': 'omitido_por_repeticion'
                            }

                        # Obtener las coordenadas del elemento
                        rect = item.rectangle()
                        
                        # Calcular coordenadas del checkbox (√°rea izquierda del TreeItem)
                        # Bas√°ndome en tu imagen, el checkbox est√° en la parte izquierda
                        checkbox_x = rect.left + 15  # Aproximadamente 15 pixels desde el borde izquierdo
                        checkbox_y = rect.top + (rect.height() // 2)  # Centro vertical del elemento
                        
                        logger.info(f"üìç Intentando clic en checkbox de '{texto}' en coordenadas ({checkbox_x}, {checkbox_y})")
                        logger.info(f"üìê Rect√°ngulo del elemento: Left={rect.left}, Top={rect.top}, Right={rect.right}, Bottom={rect.bottom}")
                        
                        # Verificar estado actual si es posible
                        estado_previo = None
                        try:
                            # Intentar obtener estado de selecci√≥n de diferentes maneras
                            if hasattr(item, 'is_selected'):
                                estado_previo = item.is_selected()
                            elif hasattr(item, 'get_toggle_state'):
                                estado_previo = item.get_toggle_state() == 1
                            else:
                                # Buscar checkbox hijo
                                checkboxes = item.descendants(control_type="CheckBox")
                                if checkboxes:
                                    checkbox = checkboxes[0]
                                    if hasattr(checkbox, 'get_toggle_state'):
                                        estado_previo = checkbox.get_toggle_state() == 1
                                    elif hasattr(checkbox, 'is_checked'):
                                        estado_previo = checkbox.is_checked()
                        except Exception as e:
                            self.logger.debug(f"üîç No se pudo determinar estado previo de '{texto}': {e}")
                        
                        # Realizar clic en el √°rea del checkbox
                        try:
                            # M√©todo 1: Clic directo en coordenadas calculadas
                            mouse.click(coords=(checkbox_x, checkbox_y))
                            sleep(0.45)  # Peque√±a pausa para que se registre el clic
                            
                            logger.info(f"‚úÖ Clic realizado en checkbox de '{texto}'")
                            self.seleccionados_previamente.add(texto)
                            elementos_seleccionados += 1
                            
                            return {
                                'seleccionado': True,
                                'accion': 'click_checkbox',
                                'coordenadas': (checkbox_x, checkbox_y),
                                'estado_previo': estado_previo,
                                'es_clave': True,
                                'metodo': 'click_coordenadas'
                            }
                            
                        except Exception as click_error:
                            logger.warning(f"‚ö†Ô∏è Error con clic en coordenadas para '{texto}': {click_error}")
                            
                            # M√©todo 2: Intentar buscar y hacer clic en checkbox hijo
                            try:
                                checkboxes = item.descendants(control_type="CheckBox")
                                if checkboxes:
                                    checkbox = checkboxes[0]
                                    checkbox.click()
                                    sleep(0.45)
                                    
                                    logger.info(f"‚úÖ Checkbox hijo clickeado para '{texto}'")
                                    elementos_seleccionados += 1
                                    
                                    return {
                                        'seleccionado': True,
                                        'accion': 'click_checkbox_hijo',
                                        'estado_previo': estado_previo,
                                        'es_clave': True,
                                        'metodo': 'checkbox_descendant'
                                    }
                            except Exception as checkbox_error:
                                logger.warning(f"‚ö†Ô∏è Error con checkbox hijo para '{texto}': {checkbox_error}")
                            
                            # M√©todo 3: Clic en el TreeItem completo como fallback
                            try:
                                item.click()
                                sleep(0.45)
                                
                                logger.info(f"üìÑ Clic en TreeItem completo para '{texto}'")
                                elementos_seleccionados += 1
                                
                                return {
                                    'seleccionado': True,
                                    'accion': 'click_treeitem',
                                    'estado_previo': estado_previo,
                                    'es_clave': True,
                                    'metodo': 'treeitem_click'
                                }
                                
                            except Exception as treeitem_error:
                                logger.error(f"‚ùå Todos los m√©todos de clic fallaron para '{texto}': {treeitem_error}")
                                elementos_no_seleccionables += 1
                                
                                return {
                                    'seleccionado': False,
                                    'accion': 'error_todos_metodos',
                                    'errores': {
                                        'click_coordenadas': str(click_error),
                                        'checkbox_hijo': str(checkbox_error),
                                        'treeitem_click': str(treeitem_error)
                                    },
                                    'es_clave': True
                                }
                    
                    except Exception as e:
                        logger.error(f"‚ùå Error cr√≠tico verificando selecci√≥n de '{texto}': {e}")
                        elementos_no_seleccionables += 1
                        return {
                            'seleccionado': False,
                            'accion': 'error_critico',
                            'error': str(e),
                            'es_clave': True
                        }
                        
                except Exception as e:
                    logger.error(f"‚ùå Error cr√≠tico general en verificar_y_seleccionar_elemento: {e}")
                    return {
                        'seleccionado': False,
                        'accion': 'error_critico_general',
                        'error': str(e),
                        'es_clave': contiene_palabra_clave(texto)
                    }
                
            def calcular_area_scroll():
                """Calcula el √°rea de scroll bas√°ndose en los elementos TreeItem visibles"""
                try:
                    tree_items = self.analysis_window.descendants(control_type="TreeItem")
                    if not tree_items:
                        return 250, 560  # Valores por defecto del log
                    
                    # Obtener coordenadas de todos los elementos TreeItem
                    min_x = float('inf')
                    max_x = float('-inf')
                    min_y = float('inf')
                    max_y = float('-inf')
                    
                    for item in tree_items:
                        try:
                            rect = item.rectangle()
                            min_x = min(min_x, rect.left)
                            max_x = max(max_x, rect.right)
                            min_y = min(min_y, rect.top)
                            max_y = max(max_y, rect.bottom)
                        except:
                            continue
                    
                    # Calcular centro del √°rea
                    if min_x != float('inf'):
                        x_center = (min_x + max_x) // 2
                        y_center = (min_y + max_y) // 2
                        logger.info(f"üìê √Årea TreeView calculada: X={min_x}-{max_x}, Y={min_y}-{max_y}")
                        logger.info(f"üéØ Centro para scroll: ({x_center}, {y_center})")
                        return x_center, y_center
                    else:
                        return 250, 560  # Fallback a valores del log
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error calculando √°rea de scroll: {e}. Usando valores por defecto.")
                    return 250, 560

            def realizar_scroll_inteligente(x_scroll, y_scroll, direccion=-3):
                """Realiza scroll en el √°rea espec√≠fica del TreeView"""
                try:
                    # Mover cursor al √°rea de scroll
                    mouse.move(coords=(x_scroll, y_scroll))
                    sleep(0.1)  # Peque√±a pausa para asegurar posicionamiento
                    
                    # Realizar scroll
                    mouse.scroll(coords=(x_scroll, y_scroll), wheel_dist=direccion)
                    sleep(0.5)  # Pausa para que la interfaz se actualice
                    
                    logger.info(f"üîÑ Scroll realizado en ({x_scroll}, {y_scroll}) con distancia {direccion}")
                    return True
                except Exception as e:
                    logger.error(f"‚ùå Error realizando scroll: {e}")
                    return False

            def obtener_elementos_actuales():
                """Obtiene todos los elementos TreeItem actuales con sus identificadores √∫nicos"""
                elementos_actuales = {}
                try:
                    tree_items = self.ventana_configuracion.descendants(control_type="TreeItem")
                    for item in tree_items:
                        try:
                            texto = item.window_text().strip()
                            key_id = item.element_info.runtime_id
                            rect = item.rectangle()
                            
                            # Crear identificador √∫nico combinando runtime_id y posici√≥n
                            identificador = f"{tuple(key_id)}_{rect.top}_{rect.left}"
                            
                            elementos_actuales[identificador] = {
                                'item': item,
                                'texto': texto,
                                'rect': rect,
                                'runtime_id': key_id
                            }
                        except:
                            continue
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error obteniendo elementos actuales: {e}")
                
                return elementos_actuales

            # === INICIO DEL PROCESO DE EXTRACCI√ìN Y SELECCI√ìN ===
            
            # Calcular √°rea de scroll
            x_scroll, y_scroll = calcular_area_scroll()
            
            # Control de scroll inteligente
            elementos_vistos = set()
            intentos_sin_cambios = 0
            max_intentos_sin_cambios = 3
            max_scrolls_totales = 3  # L√≠mite m√°ximo de scrolls para evitar bucles infinitos
            scrolls_realizados = 0
            
            logger.info(f"üñ±Ô∏è Iniciando extracci√≥n con scroll y selecci√≥n en √°rea: ({x_scroll}, {y_scroll})")
            
            while intentos_sin_cambios < max_intentos_sin_cambios and scrolls_realizados < max_scrolls_totales:
                
                # Obtener elementos actuales
                elementos_actuales = obtener_elementos_actuales()
                elementos_nuevos = 0
                
                # Procesar elementos
                for identificador, elemento_info in elementos_actuales.items():
                    if identificador in elementos_vistos:
                        continue
                    
                    elementos_vistos.add(identificador)
                    elementos_nuevos += 1
                    
                    item = elemento_info['item']
                    texto = elemento_info['texto']
                    
                    # Log de detalles del control
                    detalles = self._log_control_details(item, index, "TreeItem")
                    
                    # Aplicar l√≥gica de selecci√≥n
                    resultado_seleccion = verificar_y_seleccionar_elemento(item, texto)
                    detalles.update(resultado_seleccion)
                    
                    # Determinar tipo de elemento
                    try:
                        hijos = item.children()
                        if len(hijos) > 0:
                            logger.info(f"üìÅ Nodo ra√≠z detectado: '{texto}' con {len(hijos)} hijos")
                            detalles['tipo'] = "Nodo ra√≠z"
                            detalles['num_hijos'] = len(hijos)
                        else:
                            logger.info(f"üìÑ Item hijo: '{texto}'")
                            detalles['tipo'] = "Item hijo"
                            detalles['num_hijos'] = 0
                    except:
                        detalles['tipo'] = "Elemento sin hijos detectables"
                        detalles['num_hijos'] = 0
                    
                    # Almacenar elemento con informaci√≥n de selecci√≥n
                    if detalles.get('es_clave', False):
                        if detalles.get('seleccionado', False):
                            arbol_componentes[f"Seleccionado_Clave_{index}"] = detalles
                            logger.info(f"üéØ Elemento seleccionado: '{texto}' - Acci√≥n: {detalles.get('accion', 'N/A')}")
                        else:
                            arbol_componentes[f"NoSeleccionado_Clave_{index}"] = detalles
                            logger.info(f"‚ö†Ô∏è Elemento clave no seleccionado: '{texto}' - Raz√≥n: {detalles.get('accion', 'N/A')}")
                    else:
                        arbol_componentes[f"Normal_TreeItem_{index}"] = detalles
                    
                    index += 1
                
                # Evaluar si hacer scroll
                if elementos_nuevos > 0:
                    logger.info(f"üîç Se detectaron {elementos_nuevos} elementos nuevos")
                    intentos_sin_cambios = 0
                    
                    # Hacer scroll para buscar m√°s elementos
                    if realizar_scroll_inteligente(x_scroll, y_scroll):
                        scrolls_realizados += 1
                        sleep(0.8)  # Pausa para que la interfaz se estabilice
                    else:
                        break
                        
                else:
                    intentos_sin_cambios += 1
                    logger.info(f"‚è∏Ô∏è No se detectaron elementos nuevos (intento {intentos_sin_cambios}/{max_intentos_sin_cambios})")
                    
                    if intentos_sin_cambios < max_intentos_sin_cambios:
                        # Intentar scroll adicional por si hay m√°s contenido
                        if realizar_scroll_inteligente(x_scroll, y_scroll):
                            scrolls_realizados += 1
                            sleep(1.0)  # Pausa m√°s larga cuando no hay elementos nuevos
                        else:
                            break
            
            # === FINALIZACI√ìN Y RESUMEN ===
            
            razon_finalizacion = ""
            if intentos_sin_cambios >= max_intentos_sin_cambios:
                razon_finalizacion = f"No se detectaron elementos nuevos despu√©s de {max_intentos_sin_cambios} intentos"
            elif scrolls_realizados >= max_scrolls_totales:
                razon_finalizacion = f"Se alcanz√≥ el l√≠mite m√°ximo de {max_scrolls_totales} scrolls"
            else:
                razon_finalizacion = "Proceso completado exitosamente"
            
            # Estad√≠sticas finales
            elementos_con_clave = sum(1 for comp in arbol_componentes.values() if comp.get('es_clave', False))
            elementos_sin_clave = len(arbol_componentes) - elementos_con_clave
            
            logger.info("\n" + "="*60)
            logger.info("üìä === RESUMEN DE EXTRACCI√ìN Y SELECCI√ìN ===")
            logger.info(f"‚úÖ Total de elementos extra√≠dos: {len(arbol_componentes)}")
            logger.info(f"üéØ Elementos con palabras clave: {elementos_con_clave}")
            logger.info(f"üìÑ Elementos sin palabras clave: {elementos_sin_clave}")
            logger.info(f"‚úîÔ∏è Elementos seleccionados exitosamente: {elementos_seleccionados}")
            logger.info(f"‚ö†Ô∏è Elementos no seleccionables: {elementos_no_seleccionables}")
            logger.info(f"üîÑ Scrolls realizados: {scrolls_realizados}")
            logger.info(f"üèÅ Raz√≥n de finalizaci√≥n: {razon_finalizacion}")
            logger.info("="*60)
            
            return arbol_componentes

        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en extracci√≥n del √°rbol de mediciones: {e}")
            logger.error(f"üìç Detalles del error: {type(e).__name__}: {str(e)}")
            return {}


    def extraer_tabla_mediciones(self):
        """Extrae informaci√≥n de la tabla de mediciones inferior"""
        try:
            logger.info("\nüìã === EXTRACCI√ìN: TABLA DE MEDICIONES ===")

            tablas_encontradas = {}
            index = 0

            # Buscar tipos de controles que podr√≠an contener tablas
            tipos_posibles = ["DataGrid", "Table"]

            for tipo_tabla in tipos_posibles:
                try:
                    tablas = self.ventana_configuracion.descendants(control_type=tipo_tabla)

                    for tabla in tablas:
                        try:
                            detalles = self._log_control_details(tabla, index, tipo_tabla)

                            # Mover mouse y hacer clic en esquina superior izquierda del rect√°ngulo con offset +3 en X
                            rect = tabla.rectangle()
                            x = rect.left + 3
                            y = rect.top
                            logger.info(f"üñ±Ô∏è Moviendo mouse a ({x}, {y}) y haciendo clic...")
                            moveTo(x, y, duration=0.3)
                            click()
                            logger.info("‚úÖ Click realizado.")
                            
                            tablas_encontradas[f"{tipo_tabla}_{index}"] = detalles
                            index += 1

                        except Exception as e:
                            self.logger.debug(f"Error procesando tabla {tipo_tabla}[{index}]: {e}")

                except Exception as e:
                    self.logger.debug(f"Tipo {tipo_tabla} no disponible: {e}")

            logger.info(f"üìä RESUMEN TABLAS: {len(tablas_encontradas)} encontradas")
            return tablas_encontradas

        except Exception as e:
            logger.error(f"‚ùå Error extrayendo tablas: {e}")
            return {}
        
    
    def extraer_informes_graficos(self):
        """Extrae informaci√≥n espec√≠fica de la secci√≥n 'Informes y gr√°ficos'"""
        try:
            logger.info("\nüìà === EXTRACCI√ìN: INFORMES Y GR√ÅFICOS ===")

            index = 0
            informes_encontrados = self._buscar_informes(index)
            index += len(informes_encontrados)

            # Buscar texto relacionado
            logger.info("\nüìã Buscando elementos de texto relacionados...")
            textos = self.ventana_configuracion.descendants(control_type="Text")
            for texto in textos:
                try:
                    texto_content = texto.window_text().strip()
                    if any(k in texto_content for k in ["Informes", "Gr√°ficos", "Informes y gr√°ficos"]):
                        detalles = self._log_control_details(texto, index, "Text")
                        if detalles:
                            detalles['contenido_relevante'] = texto_content
                            informes_encontrados[f"Text_Relacionado_{index}"] = detalles
                            index += 1
                            logger.info(f"   üìã TEXTO relacionado: {texto_content}")
                except Exception as e:
                    self.logger.debug(f"Error procesando texto: {e}")

            # Resumen final
            logger.info("\n" + "="*60)

            return informes_encontrados
            
        except Exception as e:
            logger.error(f"‚ùå Error extrayendo informes y gr√°ficos: {e}")
            return {}

    def _buscar_informes(self, index): 
        informes_encontrados = {}

        logger.info("\nüîò Buscando bot√≥n 'Informes' y sus opciones...")

        for i, button in enumerate(self.ventana_configuracion.descendants(control_type="Button")):
            try:
                texto = button.window_text().strip()
                if "Informe" in texto:
                    detalles = self._log_control_details(button, index, "Button")
                    if detalles:
                        detalles['metodo_deteccion'] = "Por texto bot√≥n"

                        try:
                            button.click_input()
                            time.sleep(1.2)  # Esperar men√∫ emergente

                            x, y = pyautogui.position()
                            move(coords=(x, y + 52))
                            time.sleep(0.5)
                            click(button='left')

                        except Exception as submenu_err:
                            logger.warning(f"‚ö†Ô∏è  No se pudieron obtener los subelementos del bot√≥n 'Informes': {submenu_err}")

                        informes_encontrados[f"Button_Informes_{index}"] = detalles
                        index += 1
            except Exception as e:
                self.logger.debug(f"Error en bot√≥n 'Informes': {e}")

        # Fallback: detectar por contenido visible
        buttons = self.ventana_configuracion.descendants(control_type="Button")
        for button in buttons:
            try:
                texto_button = button.window_text().strip()
                if "Informe" in texto_button or "Informes" in texto_button:
                    ya_encontrado = any("Button_Informes" in k for k in informes_encontrados)
                    if not ya_encontrado:
                        detalles = self._log_control_details(button, index, "Button")
                        if detalles:
                            detalles['funcionalidad'] = "Abre vista gr√°fica del an√°lisis"
                            detalles['metodo_deteccion'] = "Por contenido de texto"
                            detalles['opcion_prioritaria'] = "Informe CSV" if "CSV" in texto_button.upper() else None
                            informes_encontrados[f"Button_Graficos_Contenido_{index}"] = detalles
                            index += 1
                            logger.info(f"   ‚úÖ BUTTON encontrado por contenido: {texto_button}")
            except Exception as e:
                self.logger.debug(f"Error procesando bot√≥n: {e}")

        return informes_encontrados

    def guardar_archivo_csv(self, nombre_archivo: str):
        """
        Guarda el archivo CSV usando √∫nicamente m√©todos de pywinauto sin coordenadas ni pyautogui.
        """
        try:
            logger.info(f"üíæ Guardando archivo CSV: {nombre_archivo}")
            time.sleep(2)
            
            if not self.app:
                logger.error("‚ùå No hay conexi√≥n con la aplicaci√≥n Sonel")
                return False

            guardar_ventana = None

            if hasattr(self, 'main_window'):
                dialogs = self.main_window.descendants(control_type="Window")
                for i, dialog in enumerate(dialogs):
                    try:
                        self._log_control_details(dialog, index=i, tipo_esperado="Dialogo candidato")
                        if dialog.is_visible() and ("Guardar" in dialog.window_text() or dialog.child_window(title="Guardar", control_type="Button").exists()):
                            guardar_ventana = dialog
                            print(f"‚úÖ Di√°logo de guardado encontrado: '{dialog.window_text()}'")
                            break
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Di√°logo no procesado: {e}")

            if not guardar_ventana:
                print("‚ùå No se encontr√≥ ventana de guardado.")
                return False
            
            # Asegurar que la ventana est√© en primer plano
            try:
                guardar_ventana.set_focus()
                guardar_ventana.restore()
                time.sleep(1)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è No se pudo enfocar la ventana: {e}")

            # Localizar el campo de texto "Nombre"
            campo_control = None

            for idx, ctrl in enumerate(guardar_ventana.descendants()):
                if isinstance(ctrl, EditWrapper):
                    try:
                        padre = ctrl.parent()
                        if padre and "Im√°genes" in padre.window_text():
                            campo_control = ctrl
                            self._log_control_details(ctrl, index=idx, tipo_esperado="Campo Nombre (EditWrapper)")
                            break
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è No se pudo evaluar padre de componente Edit #{idx}: {e}")

            if not campo_control:
                logger.error("‚ùå No se encontr√≥ el campo de nombre para guardar el archivo.")
                return False

            # Estrategia: M√©todo est√°ndar con verificaciones adicionales
            try:
                logger.info("üîÑ Estableciendo nombre del archivo...")
                pyperclip.copy(nombre_archivo)

                # Verificar visibilidad antes de proceder
                if not campo_control.is_visible():
                    logger.warning("‚ö†Ô∏è Campo no visible, intentando scroll y focus...")
                    try:
                        campo_control.scroll_into_view()
                        time.sleep(0.2)
                    except:
                        pass
                
                # Intentar establecer foco m√∫ltiples veces
                for i in range(3):
                    try:
                        campo_control.set_focus()
                        time.sleep(0.2)
                        break
                    except Exception as e:
                        if i == 2:
                            raise e
                        time.sleep(0.3)

                campo_control.click_input(double=True)

                # Limpiar y escribir
                send_keys("^a{DEL}")
                time.sleep(0.2)
                send_keys("^v")
                time.sleep(0.2)

                logger.info(f"üìé Nombre establecido en el campo: {nombre_archivo}")
                
            except Exception as e:
                logger.error(f"‚ùå Error estableciendo nombre: {e}")
                return False

            time.sleep(0.5)

            # Localizar el bot√≥n "Guardar"
            boton_guardar_control = None
            
            try:
                for idx, ctrl in enumerate(guardar_ventana.descendants(control_type="Button")):
                    if isinstance(ctrl, ButtonWrapper) and ctrl.window_text() and ctrl.window_text().strip().lower() == "guardar":
                        boton_guardar_control = ctrl
                        self._log_control_details(ctrl, index=idx, tipo_esperado="Bot√≥n Guardar")
                        break
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Error buscando bot√≥n 'Guardar': {e}")

            if not boton_guardar_control:
                logger.error("‚ùå No se encontr√≥ el bot√≥n 'Guardar'.")
                return False

            # Hacer clic en el bot√≥n Guardar
            try:
                boton_guardar_control.set_focus()
                time.sleep(0.2)
                boton_guardar_control.invoke()
                logger.info("‚úÖ Archivo CSV guardado correctamente usando pywinauto.")
                return True
            except Exception as e:
                logger.error(f"‚ùå Error al hacer clic en Guardar: {e}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Error general en guardar_archivo_csv: {e}")
            return False

    def _log_control_details(self, control, index, tipo_esperado=""):
        """Registra detalles del control"""
        try:
            texto = control.window_text()
            auto_id = getattr(control, 'automation_id', '') or ''
            class_name = getattr(control, 'class_name', '') or ''
            control_type = control.element_info.control_type
            rect = control.rectangle()
            
            logger.info(f"[{index}] {tipo_esperado}: {texto}")
            logger.info(f"  AUTO_ID: {auto_id}")
            logger.info(f"  RECT: (L{rect.left}, T{rect.top}, R{rect.right}, B{rect.bottom})")
            
            return {
                'texto': texto,
                'auto_id': auto_id,
                'class_name': class_name,
                'control_type': str(control_type),
                'rectangle': f"(L{rect.left}, T{rect.top}, R{rect.right}, B{rect.bottom})",
                'control': control
            }
            
        except Exception as e:
            logger.error(f"Error registrando control: {e}")
            return None


    def configuracion_segunda_ventana(self):
        """
        Configura la segunda ventana de an√°lisis con las opciones requeridas
        
        Returns:
            bool: True si la configuraci√≥n fue exitosa
        """
        try:
            # Esperar a que aparezca la nueva ventana
            logger.info("‚è≥ Esperando carga de ventana de an√°lisis (Configuraci√≥n 1) ...")
            time.sleep(self.delays['window_activation'])

            # FASE 2: Vista configuraci√≥n
            logger.info("\n--- FASE 2: VISTA CONFIGURACI√ìN ---")
            
            # Usar la referencia de app del extractor inicial
            app_ref = self.parent_extractor.window_analysis.get_app_reference()
            
            if not self.conectar(app_ref):
                logger.error("‚ùå Error conectando vista configuraci√≥n")
                return False
            
            # Paso 1: Extraer navegaci√≥n lateral
            time.sleep(1)
            resultados_navegacion = self.extraer_navegacion_lateral()
            if not resultados_navegacion:
                logger.warning("‚ö†Ô∏è No se pudo extraer navegaci√≥n lateral")
            
            # Paso 2: Configurar filtros de datos
            #time.sleep(1)
            #resultados_filtros = self.configurar_filtros_datos()
            #if not resultados_filtros:
            #    logger.warning("‚ö†Ô∏è No se pudo configurar filtros")
            
            # Paso 3: Extraer configuraci√≥n principal de mediciones
            time.sleep(1)
            resultados_config = self.extraer_configuracion_principal_mediciones()
            if not resultados_config:
                logger.warning("‚ö†Ô∏è No se pudo extraer configuraci√≥n principal")
            
            # Paso 4: Extraer componentes del √°rbol de mediciones
            time.sleep(1)
            resultados_arbol = self.extraer_componentes_arbol_mediciones()
            if not resultados_arbol:
                logger.warning("‚ö†Ô∏è No se pudo extraer √°rbol de mediciones")
            
            # Paso 5: Extraer tabla de mediciones
            time.sleep(1)
            resultados_tabla = self.extraer_tabla_mediciones()
            if not resultados_tabla:
                logger.warning("‚ö†Ô∏è No se pudo extraer tabla de mediciones")
            
            # Paso 6: Extraer informes y gr√°ficos
            time.sleep(2)
            resultados_informes = self.extraer_informes_graficos()
            if not resultados_informes:
                logger.warning("‚ö†Ô∏è No se pudo extraer informes y gr√°ficos")

            # 9. Ventana de guardado archivo  
            logger.info("‚úÖ Configuraci√≥n de segunda ventana completada exitosamente")
            return True

        except Exception as e:
            logger.error(f"‚ùå Error configurando segunda ventana con refresco: {e}")
            return False
        