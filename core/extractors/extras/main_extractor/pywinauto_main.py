import sys
import os
import time
from pathlib import Path

# Agregar el directorio del proyecto al path
project_dir = Path(__file__).parent
sys.path.insert(0, str(project_dir))

from config.settings import get_config, create_directories, get_full_config
from config.logger import logger
from extractors.extras.main_extractor.pywin_extractor import PywinautoExtractor 

def main():
    """Funci√≥n principal"""
    try:
        # Obtener configuraci√≥n
        config = get_full_config()
        
        # Verificar que existe el directorio de archivos .pqm702
        input_dir = config['PATHS']['input_dir']
        if not os.path.exists(input_dir):
            print(f"‚ùå Error: No existe el directorio de entrada: {input_dir}")
            print(f"   Por favor, crea el directorio y coloca los archivos .pqm702 ah√≠")
            return
        
        # Verificar archivos .pqm702
        pqm_files = [f for f in os.listdir(input_dir) if f.lower().endswith('.pqm702')]
        if not pqm_files:
            print(f"‚ùå No se encontraron archivos .pqm702 en: {input_dir}")
            input("\nPresiona Enter para salir...")
            return
        
        print(f"üìã Encontrados {len(pqm_files)} archivos .pqm702:")
        for i, file in enumerate(pqm_files, 1):
            print(f"   {i}. {file}")
        
        # Verificar que el ejecutable de Sonel existe
        sonel_exe = config['PATHS']['sonel_exe_path']
        if not os.path.exists(sonel_exe):
            print(f"‚ùå Error: No se encuentra el ejecutable de Sonel Analysis: {sonel_exe}")
            print(f"   Por favor, verifica la ruta en la configuraci√≥n")
            input("\nPresiona Enter para salir...")
            return
        
        # Mostrar informaci√≥n del sistema
        print(f"\nüìä INFORMACI√ìN DEL SISTEMA:")
        print(f"   ‚Ä¢ Directorio de entrada: {input_dir}")
        print(f"   ‚Ä¢ Directorio de salida: {config['PATHS']['export_dir']}")
        print(f"   ‚Ä¢ Archivos a procesar: {len(pqm_files)}")
        
        # Confirmar ejecuci√≥n
        print("\n‚ö†Ô∏è  IMPORTANTE:")
        print("   ‚Ä¢ Aseg√∫rate de que la resoluci√≥n de pantalla sea 1920x1080")
        print("   ‚Ä¢ No muevas el mouse durante la ejecuci√≥n")
        print("   ‚Ä¢ El proceso puede tomar varios minutos")
        
        # Opci√≥n de modo debug
        debug_mode = input("\n¬øActivar modo debug? (capturas de pantalla y logs detallados) (s/N): ").lower().strip()
        if debug_mode in ['s', 'si', 's√≠', 'y', 'yes']:
            os.environ['DEBUG_MODE'] = 'True'
            print("üîç Modo debug activado")
        
        confirm = input("\n¬øContinuar con la extracci√≥n? (s/N): ").lower().strip()
        if confirm not in ['s', 'si', 's√≠', 'y', 'yes']:
            print("‚õî Operaci√≥n cancelada por el usuario")
            return
        
        # Crear extractor
        extractor = PywinautoExtractor(config, pqm_files)
        
        # Ejecutar extracci√≥n
        start_time = time.time()
        
        results = extractor.extract()
        
        end_time = time.time()
        elapsed_time = end_time - start_time
        
        if results and len(results) > 0:
            print(f"‚úÖ Extracci√≥n completada exitosamente")
            print(f"üìä Archivos procesados: {len(results)}")
            print(f"‚è±Ô∏è  Tiempo total: {elapsed_time:.2f} segundos")
            print(f"üìà Promedio por archivo: {elapsed_time/len(results):.2f} segundos")
            
            # Mostrar archivos CSV generados
            csv_dir = config['PATHS']['export_dir']
            print(f"üìÑ Archivos CSV generados en {csv_dir}:")
            
            total_size = 0
            for result in results:
                if os.path.exists(result):
                    file_size = os.path.getsize(result)
                    total_size += file_size
                    print(f"   ‚úÖ {os.path.basename(result)} ({file_size:,} bytes)")
                else:
                    print(f"   ‚ùå {os.path.basename(result)} (archivo no encontrado)")
            
        else:
            print("‚ùå La extracci√≥n fall√≥")
            print("   Revisa los logs para m√°s detalles")
            
            # Mostrar posibles causas del fallo
            print("\nüîç POSIBLES CAUSAS DEL FALLO:")
            print("   ‚Ä¢ El ejecutable de Sonel Analysis no se encontr√≥ o no se pudo abrir")
            print("   ‚Ä¢ Las coordenadas de la GUI no coinciden con tu resoluci√≥n de pantalla")
            print("   ‚Ä¢ Sonel Analysis no respondi√≥ en el tiempo esperado")
            print("   ‚Ä¢ Los archivos .pqm702 est√°n corruptos o no son compatibles")
            print("   ‚Ä¢ Interferencia del usuario durante el proceso")
            
            # Sugerir soluciones
            print("\nüí° SUGERENCIAS:")
            print("   ‚Ä¢ Ejecuta el programa con modo debug activado")
            print("   ‚Ä¢ Verifica que la resoluci√≥n sea 1920x1080")
            print("   ‚Ä¢ Aseg√∫rate de que Sonel Analysis funcione manualmente")
            print("   ‚Ä¢ Revisa los logs en la carpeta 'logs/'")
        
        print("\nüèÅ Proceso terminado")
        
    except KeyboardInterrupt:
        print("\n\n‚õî Proceso interrumpido por el usuario")
        logger.info("Proceso interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        logger.error(f"Error inesperado en main: {e}", exc_info=True)
    finally:
        print("\n" + "="*60)
        print("Presiona Enter para salir...")
        input()

def process_single_file(file_path):
    """
    Procesa un solo archivo .pqm702
    
    Args:
        file_path: Ruta al archivo .pqm702
    """
    try:
        config = get_config()
        
        # Verificar que el archivo existe
        if not os.path.exists(file_path):
            print(f"‚ùå Archivo no encontrado: {file_path}")
            return False
        
        # Verificar que el ejecutable de Sonel existe
        sonel_exe = config['PATHS']['sonel_exe_path']
        if not os.path.exists(sonel_exe):
            print(f"‚ùå Error: No se encuentra el ejecutable de Sonel Analysis: {sonel_exe}")
            return False
        
        print(f"üîç Procesando archivo individual: {file_path}")
        print(f"üìä Tama√±o del archivo: {os.path.getsize(file_path):,} bytes")
        
        # Opci√≥n de modo debug para archivo individual
        debug_mode = input("\n¬øActivar modo debug? (s/N): ").lower().strip()
        if debug_mode in ['s', 'si', 's√≠', 'y', 'yes']:
            os.environ['DEBUG_MODE'] = 'True'
            print("üîç Modo debug activado")
        
        extractor = PywinautoExtractor(config)
        
        start_time = time.time()
        result = extractor.extract_single_file(file_path)
        end_time = time.time()
        
        if result:
            print(f"‚úÖ Archivo procesado exitosamente en {end_time - start_time:.2f} segundos")
            print(f"üìÑ CSV generado: {result}")
            if os.path.exists(result):
                file_size = os.path.getsize(result)
                print(f"üì¶ Tama√±o del CSV: {file_size:,} bytes")
            return True
        else:
            print(f"‚ùå Error procesando archivo: {file_path}")
            print("\nüîç POSIBLES CAUSAS:")
            print("   ‚Ä¢ El archivo .pqm702 est√° corrupto o no es compatible")
            print("   ‚Ä¢ Sonel Analysis no pudo procesar el archivo")
            print("   ‚Ä¢ Error en la automatizaci√≥n de la GUI")
            return False
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
        logger.error(f"Error procesando archivo individual {file_path}: {e}", exc_info=True)
        return False

def show_help():
    """Muestra la ayuda del programa"""
    
    print("USO:")
    print("  python main_extractor.py                    # Procesar todos los archivos")
    print("  python main_extractor.py archivo.pqm702    # Procesar un solo archivo")
    print("  python main_extractor.py --help            # Mostrar esta ayuda")
    print("\nREQUISITOS:")
    print("  ‚Ä¢ Resoluci√≥n de pantalla: 1920x1080")
    print("  ‚Ä¢ Sonel Analysis instalado y funcional")
    print("  ‚Ä¢ Archivos .pqm702 en la carpeta 'archivos_pqm/'")
    print("\nARCHIVOS DE CONFIGURACI√ìN:")
    print("  ‚Ä¢ config/settings.py - Configuraci√≥n principal")
    print("  ‚Ä¢ logs/ - Carpeta de logs")
    print("  ‚Ä¢ csv_generados/ - Carpeta de salida")
    print("\nMODO DEBUG:")
    print("  ‚Ä¢ Activa capturas de pantalla paso a paso")
    print("  ‚Ä¢ Genera logs detallados de cada acci√≥n")
    print("  ‚Ä¢ √ötil para diagnosticar problemas")

if __name__ == "__main__":
    # Verificar argumentos de l√≠nea de comandos
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        if arg in ['--help', '-h', 'help']:
            show_help()
            sys.exit(0)
        elif arg.lower().endswith('.pqm702'):
            # Modo archivo √∫nico
            file_path = sys.argv[1]
            if os.path.exists(file_path):
                create_directories()
                success = process_single_file(file_path)
                sys.exit(0 if success else 1)
            else:
                print(f"‚ùå Archivo no encontrado: {file_path}")
                sys.exit(1)
        else:
            print(f"‚ùå Argumento no v√°lido: {arg}")
            print("Usa --help para ver las opciones disponibles")
            sys.exit(1)
    else:
        # Modo procesamiento masivo
        main()