import os
import time
import pyperclip
import pyautogui
from pywinauto import mouse
from datetime import datetime
from config.logger import get_logger
from core.utils.coordinates_utils import CoordinatesUtils

class GuiConfiguracion:
    """Maneja la vista de configuraci√≥n de Sonel Analysis usando coordenadas GUI"""
    
    def __init__(self, coordinates):
        self.coordinates = coordinates
        self.app_reference = None
        
        # Logger espec√≠fico
        self.logger = get_logger("gui_config", f"{__name__}_gui_config")
        
        # Configurar pyautogui
        pyautogui.FAILSAFE = True
        pyautogui.PAUSE = 0.3
        
        self.logger.info("üéõÔ∏è GuiConfiguracion iniciado")
    
    def conectar(self, app_reference):
        """
        Conecta con la referencia de la aplicaci√≥n
        
        Args:
            app_reference: Referencia al proceso de la aplicaci√≥n
            
        Returns:
            bool: True si la conexi√≥n fue exitosa
        """
        try:
            self.app_reference = app_reference
            
            if not self.app_reference or self.app_reference.poll() is not None:
                self.logger.error("‚ùå Referencia de aplicaci√≥n no v√°lida")
                return False
            
            self.logger.info("‚úÖ Conectado a la vista de configuraci√≥n")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error conectando a configuraci√≥n: {e}")
            return False
    
    def extraer_navegacion_lateral_gui(self):
        """
        Extrae informaci√≥n de navegaci√≥n lateral usando coordenadas
        
        Returns:
            bool: True si la extracci√≥n fue exitosa
        """
        try:
            self.logger.info("üìã Extrayendo navegaci√≥n lateral...")
            
            # Buscar elementos de navegaci√≥n lateral
            navigation_elements = [
                "CheckBox_select_all",
                "Button_expand_all"
            ]
            
            extraidos = 0
            for element_key in navigation_elements:
                if element_key in self.coordinates:
                    coord_info = self.coordinates[element_key]
                    texto = coord_info.get('texto', 'Sin texto')
                    x, y = CoordinatesUtils.get_coordinate_center(coord_info)
                    
                    self.logger.info(f"üìç {element_key}: '{texto}' en ({x}, {y})")
                    
                    pyautogui.moveTo(x, y)
                    pyautogui.click()

                    extraidos += 1
                    self.logger.info(f"‚úÖ Elemento '{texto}' configurado")
                else:
                    self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ coordenada para: {element_key}")
            
            self.logger.info(f"‚úÖ Navegaci√≥n lateral extra√≠da: {extraidos} elementos")
            return extraidos > 0
            
        except Exception as e:
            self.logger.error(f"‚ùå Error extrayendo navegaci√≥n lateral: {e}")
            return False
    
    def configurar_radiobutton_gui(self):
        """
        Configura radiobuttons usando coordenadas
        
        Returns:
            bool: True si la configuraci√≥n fue exitosa
        """
        try:
            self.logger.info("üîò Configurando radiobuttons...")
            
            # Buscar RadioButton_User
            radio_key = "RadioButton_User"
            if radio_key not in self.coordinates:
                self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ coordenada para: {radio_key}")
                return True  # No es cr√≠tico
            
            radio_coord = self.coordinates[radio_key]
            x, y = CoordinatesUtils.get_coordinate_center(radio_coord)
            texto = radio_coord.get('texto', 'User')
            
            self.logger.info(f"üéØ Seleccionando radiobutton '{texto}' en ({x}, {y})")
            
            # Hacer clic en el radiobutton
            pyautogui.click(x, y)
            time.sleep(2)
            
            self.logger.info("‚úÖ Radiobutton configurado")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error configurando radiobutton: {e}")
            return False
    
    def configurar_checkboxes_gui(self):
        """
        Configura checkboxes usando coordenadas
        
        Returns:
            bool: True si la configuraci√≥n fue exitosa
        """
        try:
            self.logger.info("‚òëÔ∏è Configurando checkboxes...")
            
            # Lista de checkboxes a configurar
            checkbox_elements = [
                "CheckBox_MIN",
                "CheckBox_MAX", 
                "CheckBox_INSTANT"
            ]
            
            configurados = 0
            for checkbox_key in checkbox_elements:
                if checkbox_key in self.coordinates:
                    checkbox_coord = self.coordinates[checkbox_key]
                    x, y = CoordinatesUtils.get_coordinate_center(checkbox_coord)
                    texto = checkbox_coord.get('texto', checkbox_key)
                    
                    self.logger.info(f"üéØ Marcando checkbox '{texto}' en ({x}, {y})")
                    
                    # Hacer clic en el checkbox
                    pyautogui.click(x, y)
                    time.sleep(0.5)
                    configurados += 1
                else:
                    self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ coordenada para: {checkbox_key}")
            
            self.logger.info(f"‚úÖ Checkboxes configurados: {configurados}")
            return configurados > 0
            
        except Exception as e:
            self.logger.error(f"‚ùå Error configurando checkboxes: {e}")
            return False
    
    def extraer_configuracion_principal_mediciones_gui(self):
        """
        Extrae configuraci√≥n principal de mediciones usando coordenadas
        
        Returns:
            bool: True si la extracci√≥n fue exitosa
        """
        try:
            self.logger.info("üìä Extrayendo configuraci√≥n principal de mediciones...")
            time.sleep(3)

            # Buscar checkbox principal de mediciones
            main_checkbox_key = "CheckBox_measurements_0"
            if main_checkbox_key in self.coordinates:
                checkbox_coord = self.coordinates[main_checkbox_key]
                x, y = CoordinatesUtils.get_coordinate_center(checkbox_coord)
                texto = checkbox_coord.get('texto', 'Measurements')
                
                self.logger.info(f"üìç Mediciones principales: '{texto}' en ({x}, {y})")
                
                # Hacer clic para expandir/activar mediciones
                pyautogui.click(x, y)
                time.sleep(2)
                
                self.logger.info("‚úÖ Configuraci√≥n principal de mediciones extra√≠da")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è No se encontr√≥ checkbox principal de mediciones")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Error extrayendo configuraci√≥n de mediciones: {e}")
            return False
    
    def extraer_componentes_arbol_mediciones_gui(self):
        """
        Extrae componentes del √°rbol de mediciones usando coordenadas y scroll.
        Realiza clic en el borde izquierdo centrado verticalmente.
        
        Returns:
            bool: True si la extracci√≥n fue exitosa
        """
        try:
            self.logger.info("üå≥ Extrayendo componentes del √°rbol de mediciones...")

            tree_elements = [key for key in self.coordinates.keys() 
                            if key.startswith("TreeItem_componentes_mediciones")]

            if not tree_elements:
                self.logger.warning("‚ö†Ô∏è No se encontraron elementos del √°rbol de mediciones")
                return False

            # Funci√≥n modificada: c√°lculo del centro del scroll (sin cambios)
            def calcular_area_scroll_coordenadas():
                xs = []
                ys = []
                for key in tree_elements:
                    coord = self.coordinates[key]
                    if 'rect' in coord:
                        rect = coord['rect']
                        center_x = (rect['left'] + rect['right']) // 2
                        center_y = (rect['top'] + rect['bottom']) // 2
                        xs.append(center_x)
                        ys.append(center_y)
                if not xs or not ys:
                    return 250, 560  # fallback

                min_x, max_x = min(xs), max(xs)
                min_y, max_y = min(ys), max(ys)
                x_center = (min_x + max_x) // 2
                y_center = (min_y + max_y) // 2

                self.logger.info(f"üìê √Årea TreeView desde coordenadas: X={min_x}-{max_x}, Y={min_y}-{max_y}")
                self.logger.info(f"üéØ Centro estimado para scroll: ({x_center}, {y_center})")
                return x_center, y_center

            def realizar_scroll_inteligente(x_scroll, y_scroll, direccion=-3):
                try:
                    mouse.move(coords=(x_scroll, y_scroll))
                    time.sleep(0.1)
                    mouse.scroll(coords=(x_scroll, y_scroll), wheel_dist=direccion)
                    time.sleep(0.5)
                    self.logger.info(f"üîÑ Scroll realizado en ({x_scroll}, {y_scroll}) con distancia {direccion}")
                    return True
                except Exception as e:
                    self.logger.error(f"‚ùå Error realizando scroll: {e}")
                    return False

            x_scroll, y_scroll = calcular_area_scroll_coordenadas()

            extraidos = 0
            intentos_scroll = 0
            max_intentos = 10
            visitados = set()
            screen_height = pyautogui.size().height

            while extraidos < len(tree_elements) and intentos_scroll < max_intentos:
                for element_key in tree_elements:
                    if element_key in visitados:
                        continue

                    coord_info = self.coordinates[element_key]
                    texto = coord_info.get('texto', 'Sin texto')

                    # üîß NUEVO: obtener punto en borde izquierdo centrado verticalmente
                    if 'rect' in coord_info:
                        rect = coord_info['rect']
                        x = rect['left'] + 3  # offset leve para evitar bordes duros
                        y = (rect['top'] + rect['bottom']) // 2
                    else:
                        x, y = CoordinatesUtils.get_coordinate_center(coord_info)  # fallback

                    if 0 < y < screen_height:
                        self.logger.info(f"üìç {element_key}: '{texto}' en ({x}, {y}) [clic lateral centrado]")
                        pyautogui.moveTo(x, y)
                        pyautogui.click()
                        time.sleep(0.3)
                        extraidos += 1
                        visitados.add(element_key)
                    else:
                        self.logger.info(f"üîç {element_key} no visible a√∫n (Y={y}), se intentar√° scroll.")

                if extraidos < len(tree_elements):
                    realizar_scroll_inteligente(x_scroll, y_scroll, direccion=-3)
                    intentos_scroll += 1

            self.logger.info(f"‚úÖ Componentes del √°rbol extra√≠dos: {extraidos}")
            return extraidos > 0

        except Exception as e:
            self.logger.error(f"‚ùå Error extrayendo componentes del √°rbol: {e}")
            return False
    
    def extraer_tabla_mediciones_gui(self):
        """
        Extrae informaci√≥n de la tabla de mediciones usando coordenadas
        
        Returns:
            bool: True si la extracci√≥n fue exitosa
        """
        try:
            self.logger.info("üìã Extrayendo tabla de mediciones...")

            table_key = "Table_table_0"
            if table_key in self.coordinates:
                table_coord = self.coordinates[table_key]

                if 'rect' in table_coord:
                    rect = table_coord['rect']
                    x = rect['left'] + 3  # offset para evitar bordes exactos
                    y = rect['top']

                    self.logger.info(f"üìç Tabla encontrada: esquina superior izquierda en ({x}, {y})")

                    # Hacer clic en la esquina superior izquierda para activarla
                    pyautogui.moveTo(x, y, duration=0.3)
                    pyautogui.click()
                    time.sleep(2)

                    self.logger.info("‚úÖ Tabla de mediciones seleccionada correctamente")
                    return True
                else:
                    self.logger.warning("‚ö†Ô∏è No se encontr√≥ rect√°ngulo delimitador en la coordenada de la tabla")
                    return False
            else:
                self.logger.warning("‚ö†Ô∏è No se encontr√≥ la coordenada 'Table_table_0'")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå Error extrayendo tabla de mediciones: {e}")
            return False
    
    def extraer_informes_graficos_gui(self):
        """
        Extrae informaci√≥n de informes gr√°ficos usando coordenadas
        
        Returns:
            bool: True si la extracci√≥n fue exitosa
        """
        try:
            self.logger.info("üìà Extrayendo informes gr√°ficos...")
            
            # Buscar bot√≥n de reportes
            reports_button_key = "Button_reports_0"
            if reports_button_key in self.coordinates:
                reports_coord = self.coordinates[reports_button_key]
                x, y = CoordinatesUtils.get_coordinate_center(reports_coord)
                texto = reports_coord.get('texto', 'Reports')
                
                self.logger.info(f"üéØ Haciendo clic en '{texto}' en ({x}, {y})")
                
                # Hacer clic en reportes
                pyautogui.click(x, y)
                time.sleep(3)

                new_y = y + 50
                self.logger.info(f"üñ±Ô∏è Haciendo segundo clic en coordenada desplazada ({x}, {new_y})")
                pyautogui.click(x, new_y)
                time.sleep(3)
                
                self.logger.info("‚úÖ Informes gr√°ficos extra√≠dos")
                return True
            else:
                self.logger.warning("‚ö†Ô∏è No se encontr√≥ bot√≥n de reportes")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Error extrayendo informes gr√°ficos: {e}")
            return False
    
    def guardar_archivo_csv(self, expected_csv_path: str):
        """
        Guarda el archivo CSV usando coordenadas para la interfaz

        Args:
            expected_csv_path: Ruta esperada del archivo CSV

        Returns:
            bool: True si el guardado fue exitoso
        """
        try:
            self.logger.info(f"üíæ Guardando archivo CSV: {expected_csv_path}")

            name_field_key = "EditWrapper_nombre_archivo"
            save_button_key = "ButtonWrapper_boton_guardar"

            if name_field_key not in self.coordinates or save_button_key not in self.coordinates:
                self.logger.error("‚ùå No se encontraron elementos necesarios para guardar")
                return False

            # === Nombre limpio del archivo ===
            nombre_archivo = expected_csv_path

            # ‚úÖ Normalizar nombre del archivo
            nombre_archivo = nombre_archivo.strip()

            # Extraer carpeta y nombre
            carpeta = os.path.dirname(nombre_archivo)
            nombre = os.path.basename(nombre_archivo)
            
            if "." in nombre:
                partes = nombre.split(".")
                nombre_sin_puntos = "".join(partes[:-1])
                extension = partes[-1]
                nombre = f"{nombre_sin_puntos}.{extension}"
            else:
                self.logger.warning("‚ö†Ô∏è El nombre del archivo no conten√≠a una extensi√≥n expl√≠cita.")

            nombre_final = self._aplicar_numeracion_incremental_csv(carpeta, nombre)
            archivo_a_guardar = os.path.join(carpeta, nombre_final)

            # Logs para debugging
            self.logger.info(f"   üìÅ Ruta base: {carpeta}")
            self.logger.info(f"   üìÑ Nombre sanitizado: {nombre}")
            self.logger.info(f"   üìÑ Nombre final (con numeraci√≥n si aplica): {nombre_final}")
            self.logger.info(f"   üíæ Guardando como: {archivo_a_guardar}")


            pyperclip.copy(archivo_a_guardar)
            self.logger.info(f"üìù Nombre normalizado y copiado: {archivo_a_guardar}")

            # === Clic en el campo de nombre ===
            name_coord = self.coordinates[name_field_key]
            x, y = CoordinatesUtils.get_coordinate_center(name_coord)
            self.logger.info(f"üéØ Haciendo clic en campo nombre en ({x}, {y})")
            pyautogui.click(x, y)
            time.sleep(0.9)

            # Limpiar y pegar
            pyautogui.hotkey('ctrl', 'a')
            time.sleep(0.5)
            pyautogui.hotkey('ctrl', 'v')
            time.sleep(0.9)

            # === Clic en bot√≥n guardar ===
            save_coord = self.coordinates[save_button_key]
            x, y = CoordinatesUtils.get_coordinate_center(save_coord)
            self.logger.info(f"üéØ Haciendo clic en 'Guardar' en ({x}, {y})")
            pyautogui.click(x, y)
            time.sleep(4)

            self.logger.info("‚úÖ Comando de guardado ejecutado")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå Error guardando archivo CSV: {e}")
            return False
    
    def get_coordinates_summary(self):
        """
        Obtiene un resumen de las coordenadas disponibles
        
        Returns:
            dict: Resumen de coordenadas
        """
        return CoordinatesUtils.get_coordinates_summary(self.coordinates)
    

    def _aplicar_numeracion_incremental_csv(self, carpeta, nombre_archivo):
        """
        Aplica numeraci√≥n incremental al nombre del archivo CSV si ya existe.
        
        Args:
            carpeta (str): Directorio donde se guardar√° el archivo
            nombre_archivo (str): Nombre del archivo original con extensi√≥n
            
        Returns:
            str: Nombre del archivo con numeraci√≥n incremental si es necesario
        """
        import os
        
        # Ruta completa del archivo original
        ruta_completa = os.path.join(carpeta, nombre_archivo)
        
        # Si no existe, usar el nombre original
        if not os.path.exists(ruta_completa):
            self.logger.info(f"   ‚úÖ Nombre disponible: {nombre_archivo}")
            return nombre_archivo
        
        # Extraer nombre base y extensi√≥n
        nombre_base, extension = os.path.splitext(nombre_archivo)
        
        # Buscar el siguiente n√∫mero disponible
        contador = 1
        max_intentos = 500
        
        while contador <= max_intentos:
            nombre_numerado = f"{contador}_{nombre_base}{extension}"
            ruta_numerada = os.path.join(carpeta, nombre_numerado)
            
            if not os.path.exists(ruta_numerada):
                self.logger.info(f"   üîÑ Archivo ya existe, aplicando numeraci√≥n: {nombre_numerado}")
                self.logger.info(f"   üìù N√∫mero asignado: {contador}")
                return nombre_numerado
            
            contador += 1
        
        # Si se agotaron los intentos, usar timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nombre_timestamp = f"{timestamp}_{nombre_base}{extension}"
        
        self.logger.warning(f"‚ö†Ô∏è Se agotaron {max_intentos} intentos de numeraci√≥n")
        self.logger.info(f"   üïê Usando timestamp: {nombre_timestamp}")
        
        return nombre_timestamp