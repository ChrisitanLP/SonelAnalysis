import re
import time
import logging
import pyperclip
import pyautogui
from time import sleep
from pywinauto import mouse
from pywinauto.mouse import move
from pyautogui import moveTo, click
from pywinauto.keyboard import send_keys
from config.logger import get_logger
from core.utils.text_normalize import TextUtils
from core.utils.file_save import ComponentesGuardado
from pywinauto.controls.uia_controls import EditWrapper, ButtonWrapper
from config.settings import get_full_config, get_all_possible_translations, get_all_excluded_terms

class SonelExecutor:
    """Ejecuta acciones principales de extracci√≥n y configuraci√≥n"""
    
    def __init__(self, ventana_configuracion, app=None, main_window=None):
        self.ventana_configuracion = ventana_configuracion
        self.app = app
        self.main_window = main_window
        
        # Configurar logger
        config = get_full_config()
        self.logger = get_logger("pywinauto", f"{__name__}_pywinauto")
        self.logger.setLevel(getattr(logging, config['LOGGING']['level']))

        self.save_file = ComponentesGuardado(logger=self.logger)

    def extraer_configuracion_principal_mediciones(self):
        """
        Busca y desactiva el checkbox 'Seleccionar todo' si est√° activado,
        y hace clic en el bot√≥n 'Expandir todo'.
        ‚úÖ VERSI√ìN MULTIIDIOMA
        """
        try:
            self.logger.info("\nüîß Buscando 'Seleccionar todo' y 'Expandir todo' (multiidioma)...")
            
            # Obtener traducciones para todos los idiomas
            select_all_texts = get_all_possible_translations('ui_controls', 'select_all')
            expand_all_texts = get_all_possible_translations('ui_controls', 'expand_all')
            
            self.logger.info(f"üåê Buscando 'Seleccionar todo' en: {select_all_texts}")
            self.logger.info(f"üåê Buscando 'Expandir todo' en: {expand_all_texts}")

            componentes_encontrados = {
                'select_all': None,
                'expand_all': None
            }

            # Buscar componentes con enfoque multiidioma
            for control in self.ventana_configuracion.descendants():
                try:
                    texto = control.window_text().strip()
                    if not texto:
                        continue

                    tipo_control = control.friendly_class_name()
                    
                    # Verificar 'Seleccionar todo'
                    if not componentes_encontrados['select_all'] and TextUtils.texto_coincide(texto, select_all_texts):
                        if tipo_control == "CheckBox":
                            componentes_encontrados['select_all'] = control
                            self.logger.info(f"‚úÖ 'Seleccionar todo' encontrado: '{texto}' ({tipo_control})")
                            self.save_file.guardar_coordenada_componente(control, "CheckBox", "select_all")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è Texto coincide pero tipo incorrecto para 'Seleccionar todo': {tipo_control}")

                    # Verificar 'Expandir todo'
                    elif not componentes_encontrados['expand_all'] and TextUtils.texto_coincide(texto, expand_all_texts):
                        if tipo_control == "Button":
                            componentes_encontrados['expand_all'] = control
                            self.logger.info(f"‚úÖ 'Expandir todo' encontrado: '{texto}' ({tipo_control})")
                            self.save_file.guardar_coordenada_componente(control, "Button", "expand_all")
                        else:
                            self.logger.warning(f"‚ö†Ô∏è Texto coincide pero tipo incorrecto para 'Expandir todo': {tipo_control}")

                    # Si ya encontramos ambos, podemos terminar la b√∫squeda
                    if componentes_encontrados['select_all'] and componentes_encontrados['expand_all']:
                        break

                except Exception as e:
                    self.logger.debug(f"Error procesando control: {e}")

            # Procesar componentes encontrados
            # Procesar 'Seleccionar todo'
            if componentes_encontrados['select_all']:
                control = componentes_encontrados['select_all']
                try:
                    estado = control.get_toggle_state()
                    self.logger.info(f"üîç Estado actual del checkbox: {estado}")

                    if estado == 1:  # Si est√° activado
                        self.logger.info("üîÑ Desactivando checkbox 'Seleccionar todo'...")
                        control.toggle()
                        self.logger.info("‚úÖ Checkbox desactivado")
                    else:
                        self.logger.info("‚úîÔ∏è Checkbox 'Seleccionar todo' ya est√° desactivado")
                except Exception as e:
                    self.logger.error(f"‚ùå Error manipulando checkbox 'Seleccionar todo': {e}")
            else:
                self.logger.warning("‚ö†Ô∏è No se encontr√≥ el checkbox 'Seleccionar todo' en ning√∫n idioma")

            # Procesar 'Expandir todo'
            if componentes_encontrados['expand_all']:
                control = componentes_encontrados['expand_all']
                try:
                    self.logger.info("üñ±Ô∏è Haciendo clic en 'Expandir todo'...")
                    control.click_input()
                    self.logger.info("‚úÖ Clic en 'Expandir todo' realizado")
                except Exception as e:
                    self.logger.error(f"‚ùå Error haciendo clic en 'Expandir todo': {e}")
            else:
                self.logger.warning("‚ö†Ô∏è No se encontr√≥ el bot√≥n 'Expandir todo' en ning√∫n idioma")

        except Exception as e:
            self.logger.error(f"‚ùå Error general en 'extraer_configuracion_principal_mediciones': {e}")


    def extraer_componentes_arbol_mediciones(self):
        """
        Extrae los componentes dentro del √°rbol de mediciones utilizando scroll inteligente
        y aplica l√≥gica de selecci√≥n a los elementos que coinciden con palabras clave.
        
        Caracter√≠sticas:
        - Scroll solo dentro del √°rea del TreeView
        - Detecci√≥n autom√°tica de nuevos elementos
        - Prevenci√≥n de bucles infinitos
        - Filtrado por palabras clave relevantes
        - Selecci√≥n autom√°tica de elementos relevantes
        - Manejo robusto de errores
        """
        try:
            self.logger.info("\nüå≥ === EXTRACCI√ìN Y SELECCI√ìN DE COMPONENTES DEL √ÅRBOL DE MEDICIONES ===")

            arbol_componentes = {}
            index = 0
            elementos_seleccionados = 0
            elementos_no_seleccionables = 0

            # Obtener palabras clave en todos los idiomas soportados
            palabras_clave = get_all_possible_translations('measurement_keywords')
            terminos_excluidos = get_all_excluded_terms()

            self.logger.info(f"üåê Palabras clave multiidioma cargadas: {len(palabras_clave)} t√©rminos")
            self.logger.debug(f"üìù T√©rminos: {palabras_clave}")
            self.logger.debug(f"‚ùå T√©rminos excluidos: {terminos_excluidos}")

            def normalizar_texto(texto):
                """Quita etiquetas HTML y s√≠mbolos para comparaci√≥n multiidioma"""
                if not texto:
                    return ""
                
                # Eliminar etiquetas HTML
                texto = re.sub(r"<sub>(.*?)</sub>", r"\1", texto, flags=re.IGNORECASE)
                texto = re.sub(r"<.*?>", "", texto)  # Eliminar cualquier etiqueta HTML
                
                # Eliminar s√≠mbolos y caracteres especiales
                texto = re.sub(r"[<>_/\-\(\)\[\]{}]", " ", texto)
                
                # Normalizar espacios
                texto = re.sub(r'\s+', ' ', texto)
                
                return texto.lower().strip()

            def contiene_termino(texto):
                """
                Verifica si el texto contiene alguna palabra clave multiidioma
                y NO contiene t√©rminos excluidos
                """
                from core.utils.text_normalize import TextUtils  # Importar aqu√≠ para evitar dependencias circulares
                
                # PRIMERA VERIFICACI√ìN: Comprobar si contiene t√©rminos excluidos
                if TextUtils.contiene_termino_excluido(texto, terminos_excluidos):
                    self.logger.info(f"üö´ Texto '{texto}' contiene t√©rmino excluido - RECHAZADO")
                    return False
                
                # SEGUNDA VERIFICACI√ìN: Comprobar si contiene palabras clave v√°lidas
                texto_normalizado = TextUtils.normalizar_texto(texto)
                for clave in palabras_clave:
                    clave_normalizada = TextUtils.normalizar_texto(clave)
                    if clave_normalizada in texto_normalizado:
                        self.logger.info(f"‚úÖ Texto '{texto}' contiene palabra clave v√°lida: '{clave}'")
                        return True
                
                return False

            def verificar_y_seleccionar_elemento(item, texto):
                """
                Verifica si el elemento es seleccionable y lo selecciona haciendo clic en el √°rea del checkbox.
                Retorna informaci√≥n sobre el estado de selecci√≥n.
                """
                nonlocal elementos_seleccionados, elementos_no_seleccionables
                
                try:
                    # Verificar si contiene palabra clave
                    if not contiene_termino(texto):
                        return {
                            'seleccionado': False,
                            'accion': 'no_es_clave',
                            'es_clave': False
                        }
                    
                    # Es palabra clave, intentar selecci√≥n
                    try:
                        # Este conjunto guarda los nombres ya seleccionados (puedes moverlo al inicio del proceso)
                        self.seleccionados_previamente = getattr(self, 'seleccionados_previamente', set())

                        # Verificamos si ya fue seleccionado anteriormente
                        if texto in self.seleccionados_previamente:
                            self.logger.info(f"üîÅ '{texto}' ya fue seleccionado previamente. Saltando clic.")
                            return {
                                'seleccionado': True,
                                'accion': 'ya_seleccionado',
                                'coordenadas': None,
                                'estado_previo': None,
                                'es_clave': True,
                                'metodo': 'omitido_por_repeticion'
                            }

                        # Obtener las coordenadas del elemento
                        rect = item.rectangle()
                        
                        # Calcular coordenadas del checkbox (√°rea izquierda del TreeItem)
                        # Bas√°ndome en tu imagen, el checkbox est√° en la parte izquierda
                        checkbox_x = rect.left + 15  # Aproximadamente 15 pixels desde el borde izquierdo
                        checkbox_y = rect.top + (rect.height() // 2)  # Centro vertical del elemento
                        
                        self.logger.info(f"üìç Intentando clic en checkbox de '{texto}' en coordenadas ({checkbox_x}, {checkbox_y})")
                        self.logger.info(f"üìê Rect√°ngulo del elemento: Left={rect.left}, Top={rect.top}, Right={rect.right}, Bottom={rect.bottom}")
                        
                        # Verificar estado actual si es posible
                        estado_previo = None
                        try:
                            # Intentar obtener estado de selecci√≥n de diferentes maneras
                            if hasattr(item, 'is_selected'):
                                estado_previo = item.is_selected()
                            elif hasattr(item, 'get_toggle_state'):
                                estado_previo = item.get_toggle_state() == 1
                            else:
                                # Buscar checkbox hijo
                                checkboxes = item.descendants(control_type="CheckBox")
                                if checkboxes:
                                    checkbox = checkboxes[0]
                                    if hasattr(checkbox, 'get_toggle_state'):
                                        estado_previo = checkbox.get_toggle_state() == 1
                                    elif hasattr(checkbox, 'is_checked'):
                                        estado_previo = checkbox.is_checked()
                        except Exception as e:
                            self.logger.debug(f"üîç No se pudo determinar estado previo de '{texto}': {e}")
                        
                        # Realizar clic en el √°rea del checkbox
                        try:
                            # M√©todo 1: Clic directo en coordenadas calculadas
                            mouse.click(coords=(checkbox_x, checkbox_y))
                            sleep(0.45)  # Peque√±a pausa para que se registre el clic
                            
                            self.logger.info(f"‚úÖ Clic realizado en checkbox de '{texto}'")
                            self.seleccionados_previamente.add(texto)
                            elementos_seleccionados += 1
                            
                            return {
                                'seleccionado': True,
                                'accion': 'click_checkbox',
                                'coordenadas': (checkbox_x, checkbox_y),
                                'estado_previo': estado_previo,
                                'es_clave': True,
                                'metodo': 'click_coordenadas'
                            }
                            
                        except Exception as click_error:
                            self.logger.warning(f"‚ö†Ô∏è Error con clic en coordenadas para '{texto}': {click_error}")
                            
                            # M√©todo 2: Intentar buscar y hacer clic en checkbox hijo
                            try:
                                checkboxes = item.descendants(control_type="CheckBox")
                                if checkboxes:
                                    checkbox = checkboxes[0]
                                    checkbox.click()
                                    sleep(0.45)
                                    
                                    self.logger.info(f"‚úÖ Checkbox hijo clickeado para '{texto}'")
                                    elementos_seleccionados += 1
                                    
                                    return {
                                        'seleccionado': True,
                                        'accion': 'click_checkbox_hijo',
                                        'estado_previo': estado_previo,
                                        'es_clave': True,
                                        'metodo': 'checkbox_descendant'
                                    }
                            except Exception as checkbox_error:
                                self.logger.warning(f"‚ö†Ô∏è Error con checkbox hijo para '{texto}': {checkbox_error}")
                            
                            # M√©todo 3: Clic en el TreeItem completo como fallback
                            try:
                                item.click()
                                sleep(0.45)
                                
                                self.logger.info(f"üìÑ Clic en TreeItem completo para '{texto}'")
                                elementos_seleccionados += 1
                                
                                return {
                                    'seleccionado': True,
                                    'accion': 'click_treeitem',
                                    'estado_previo': estado_previo,
                                    'es_clave': True,
                                    'metodo': 'treeitem_click'
                                }
                                
                            except Exception as treeitem_error:
                                self.logger.error(f"‚ùå Todos los m√©todos de clic fallaron para '{texto}': {treeitem_error}")
                                elementos_no_seleccionables += 1
                                
                                return {
                                    'seleccionado': False,
                                    'accion': 'error_todos_metodos',
                                    'errores': {
                                        'click_coordenadas': str(click_error),
                                        'checkbox_hijo': str(checkbox_error),
                                        'treeitem_click': str(treeitem_error)
                                    },
                                    'es_clave': True
                                }
                    
                    except Exception as e:
                        self.logger.error(f"‚ùå Error cr√≠tico verificando selecci√≥n de '{texto}': {e}")
                        elementos_no_seleccionables += 1
                        return {
                            'seleccionado': False,
                            'accion': 'error_critico',
                            'error': str(e),
                            'es_clave': True
                        }
                        
                except Exception as e:
                    self.logger.error(f"‚ùå Error cr√≠tico general en verificar_y_seleccionar_elemento: {e}")
                    return {
                        'seleccionado': False,
                        'accion': 'error_critico_general',
                        'error': str(e),
                        'es_clave': contiene_termino(texto)
                    }
                
            def calcular_area_scroll():
                """Calcula el √°rea de scroll bas√°ndose en los elementos TreeItem visibles"""
                try:
                    tree_items = self.ventana_configuracion.descendants(control_type="TreeItem")
                    if not tree_items:
                        return 250, 560  # Valores por defecto del log
                    
                    # Obtener coordenadas de todos los elementos TreeItem
                    min_x = float('inf')
                    max_x = float('-inf')
                    min_y = float('inf')
                    max_y = float('-inf')
                    
                    for item in tree_items:
                        try:
                            rect = item.rectangle()
                            min_x = min(min_x, rect.left)
                            max_x = max(max_x, rect.right)
                            min_y = min(min_y, rect.top)
                            max_y = max(max_y, rect.bottom)
                        except:
                            continue
                    
                    # Calcular centro del √°rea
                    if min_x != float('inf'):
                        x_center = (min_x + max_x) // 2
                        y_center = (min_y + max_y) // 2
                        self.logger.info(f"üìê √Årea TreeView calculada: X={min_x}-{max_x}, Y={min_y}-{max_y}")
                        self.logger.info(f"üéØ Centro para scroll: ({x_center}, {y_center})")
                        return x_center, y_center
                    else:
                        return 250, 560  # Fallback a valores del log
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Error calculando √°rea de scroll: {e}. Usando valores por defecto.")
                    return 250, 560

            def realizar_scroll_inteligente(x_scroll, y_scroll, direccion=-3):
                """Realiza scroll en el √°rea espec√≠fica del TreeView"""
                try:
                    # Mover cursor al √°rea de scroll
                    mouse.move(coords=(x_scroll, y_scroll))
                    sleep(0.1)  # Peque√±a pausa para asegurar posicionamiento
                    
                    # Realizar scroll
                    mouse.scroll(coords=(x_scroll, y_scroll), wheel_dist=direccion)
                    sleep(0.5)  # Pausa para que la interfaz se actualice
                    
                    self.logger.info(f"üîÑ Scroll realizado en ({x_scroll}, {y_scroll}) con distancia {direccion}")
                    return True
                except Exception as e:
                    self.logger.error(f"‚ùå Error realizando scroll: {e}")
                    return False

            def obtener_elementos_actuales():
                """Obtiene todos los elementos TreeItem actuales con sus identificadores √∫nicos"""
                elementos_actuales = {}
                try:
                    tree_items = self.ventana_configuracion.descendants(control_type="TreeItem")
                    for item in tree_items:
                        try:
                            texto = item.window_text().strip()
                            key_id = item.element_info.runtime_id
                            rect = item.rectangle()
                            
                            # Crear identificador √∫nico combinando runtime_id y posici√≥n
                            identificador = f"{tuple(key_id)}_{rect.top}_{rect.left}"
                            
                            elementos_actuales[identificador] = {
                                'item': item,
                                'texto': texto,
                                'rect': rect,
                                'runtime_id': key_id
                            }
                        except:
                            continue
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è Error obteniendo elementos actuales: {e}")
                
                return elementos_actuales

            # === INICIO DEL PROCESO DE EXTRACCI√ìN Y SELECCI√ìN ===
            
            # Calcular √°rea de scroll
            x_scroll, y_scroll = calcular_area_scroll()
            
            # Control de scroll inteligente
            elementos_vistos = set()
            intentos_sin_cambios = 0
            max_intentos_sin_cambios = 3
            max_scrolls_totales = 3  # L√≠mite m√°ximo de scrolls para evitar bucles infinitos
            scrolls_realizados = 0
            
            self.logger.info(f"üñ±Ô∏è Iniciando extracci√≥n con scroll y selecci√≥n en √°rea: ({x_scroll}, {y_scroll})")
            
            while intentos_sin_cambios < max_intentos_sin_cambios and scrolls_realizados < max_scrolls_totales:
                
                # Obtener elementos actuales
                elementos_actuales = obtener_elementos_actuales()
                elementos_nuevos = 0
                
                # Procesar elementos
                for identificador, elemento_info in elementos_actuales.items():
                    if identificador in elementos_vistos:
                        continue
                    
                    elementos_vistos.add(identificador)
                    elementos_nuevos += 1
                    
                    item = elemento_info['item']
                    texto = elemento_info['texto']
                    
                    # Log de detalles del control
                    detalles = self._log_control_details(item, index, "TreeItem")
                    
                    # Aplicar l√≥gica de selecci√≥n
                    resultado_seleccion = verificar_y_seleccionar_elemento(item, texto)
                    detalles.update(resultado_seleccion)
                    
                    # Determinar tipo de elemento
                    try:
                        hijos = item.children()
                        if len(hijos) > 0:
                            self.logger.info(f"üìÅ Nodo ra√≠z detectado: '{texto}' con {len(hijos)} hijos")
                            detalles['tipo'] = "Nodo ra√≠z"
                            detalles['num_hijos'] = len(hijos)
                        else:
                            self.logger.info(f"üìÑ Item hijo: '{texto}'")
                            detalles['tipo'] = "Item hijo"
                            detalles['num_hijos'] = 0
                    except:
                        detalles['tipo'] = "Elemento sin hijos detectables"
                        detalles['num_hijos'] = 0
                    
                    # Almacenar elemento con informaci√≥n de selecci√≥n
                    if detalles.get('es_clave', False):
                        if detalles.get('seleccionado', False):
                            arbol_componentes[f"Seleccionado_Clave_{index}"] = detalles
                            self.logger.info(f"üéØ Elemento seleccionado: '{texto}' - Acci√≥n: {detalles.get('accion', 'N/A')}")

                            self.save_file.guardar_coordenada_componente(item, "TreeItem", f"componentes_mediciones_{index}")
                        else:
                            arbol_componentes[f"NoSeleccionado_Clave_{index}"] = detalles
                            self.logger.info(f"‚ö†Ô∏è Elemento clave no seleccionado: '{texto}' - Raz√≥n: {detalles.get('accion', 'N/A')}")
                    else:
                        arbol_componentes[f"Normal_TreeItem_{index}"] = detalles
                    
                    index += 1
                
                # Evaluar si hacer scroll
                if elementos_nuevos > 0:
                    self.logger.info(f"üîç Se detectaron {elementos_nuevos} elementos nuevos")
                    intentos_sin_cambios = 0
                    
                    # Hacer scroll para buscar m√°s elementos
                    if realizar_scroll_inteligente(x_scroll, y_scroll):
                        scrolls_realizados += 1
                        sleep(0.8)  # Pausa para que la interfaz se estabilice
                    else:
                        break
                        
                else:
                    intentos_sin_cambios += 1
                    self.logger.info(f"‚è∏Ô∏è No se detectaron elementos nuevos (intento {intentos_sin_cambios}/{max_intentos_sin_cambios})")
                    
                    if intentos_sin_cambios < max_intentos_sin_cambios:
                        # Intentar scroll adicional por si hay m√°s contenido
                        if realizar_scroll_inteligente(x_scroll, y_scroll):
                            scrolls_realizados += 1
                            sleep(1.0)  # Pausa m√°s larga cuando no hay elementos nuevos
                        else:
                            break
            
            # === FINALIZACI√ìN Y RESUMEN ===
            
            razon_finalizacion = ""
            if intentos_sin_cambios >= max_intentos_sin_cambios:
                razon_finalizacion = f"No se detectaron elementos nuevos despu√©s de {max_intentos_sin_cambios} intentos"
            elif scrolls_realizados >= max_scrolls_totales:
                razon_finalizacion = f"Se alcanz√≥ el l√≠mite m√°ximo de {max_scrolls_totales} scrolls"
            else:
                razon_finalizacion = "Proceso completado exitosamente"
            
            # Estad√≠sticas finales
            elementos_con_clave = sum(1 for comp in arbol_componentes.values() if comp.get('es_clave', False))
            elementos_sin_clave = len(arbol_componentes) - elementos_con_clave
            
            self.logger.info("\n" + "="*60)
            self.logger.info("üìä === RESUMEN DE EXTRACCI√ìN Y SELECCI√ìN ===")
            self.logger.info(f"‚úÖ Total de elementos extra√≠dos: {len(arbol_componentes)}")
            self.logger.info(f"üéØ Elementos con palabras clave: {elementos_con_clave}")
            self.logger.info(f"üìÑ Elementos sin palabras clave: {elementos_sin_clave}")
            self.logger.info(f"‚úîÔ∏è Elementos seleccionados exitosamente: {elementos_seleccionados}")
            self.logger.info(f"‚ö†Ô∏è Elementos no seleccionables: {elementos_no_seleccionables}")
            self.logger.info(f"üîÑ Scrolls realizados: {scrolls_realizados}")
            self.logger.info(f"üèÅ Raz√≥n de finalizaci√≥n: {razon_finalizacion}")
            self.logger.info("="*60)
            
            return arbol_componentes

        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico en extracci√≥n del √°rbol de mediciones: {e}")
            self.logger.error(f"üìç Detalles del error: {type(e).__name__}: {str(e)}")
            return {}

    def extraer_tabla_mediciones(self):
        """Extrae informaci√≥n de la tabla de mediciones inferior"""
        try:
            self.logger.info("\nüìã === EXTRACCI√ìN: TABLA DE MEDICIONES ===")

            tablas_encontradas = {}
            index = 0

            # Buscar tipos de controles que podr√≠an contener tablas
            tipos_posibles = ["DataGrid", "Table"]

            for tipo_tabla in tipos_posibles:
                try:
                    tablas = self.ventana_configuracion.descendants(control_type=tipo_tabla)

                    for tabla in tablas:
                        try:
                            detalles = self._log_control_details(tabla, index, tipo_tabla)

                            self.save_file.guardar_coordenada_componente(tabla, tipo_tabla, f"table_{index}")

                            # Mover mouse y hacer clic en esquina superior izquierda del rect√°ngulo con offset +3 en X
                            rect = tabla.rectangle()
                            x = rect.left + 3
                            y = rect.top
                            self.logger.info(f"üñ±Ô∏è Moviendo mouse a ({x}, {y}) y haciendo clic...")
                            moveTo(x, y, duration=0.3)
                            click()
                            self.logger.info("‚úÖ Click realizado.")
                            
                            tablas_encontradas[f"{tipo_tabla}_{index}"] = detalles
                            index += 1

                        except Exception as e:
                            self.logger.debug(f"Error procesando tabla {tipo_tabla}[{index}]: {e}")

                except Exception as e:
                    self.logger.debug(f"Tipo {tipo_tabla} no disponible: {e}")

            self.logger.info(f"üìä RESUMEN TABLAS: {len(tablas_encontradas)} encontradas")
            return tablas_encontradas

        except Exception as e:
            self.logger.error(f"‚ùå Error extrayendo tablas: {e}")
            return {}

    def extraer_informes_graficos(self):
        """Extrae informaci√≥n espec√≠fica de la secci√≥n 'Informes y gr√°ficos'"""
        try:
            self.logger.info("\nüìà === EXTRACCI√ìN: INFORMES Y GR√ÅFICOS ===")

            reports_texts = get_all_possible_translations('ui_controls', 'reports')
            self.logger.info(f"üåê Buscando elementos de texto relacionados con 'Informes y gr√°ficos' en: {reports_texts}")

            index = 0
            informes_encontrados = self._buscar_informes(index)
            index += len(informes_encontrados)

            # Buscar texto relacionado
            self.logger.info("\nüìã Buscando elementos de texto relacionados...")
            textos = self.ventana_configuracion.descendants(control_type="Text")
            for texto in textos:
                try:
                    texto_content = texto.window_text().strip()
                    if texto_content and TextUtils.texto_coincide(texto_content, reports_texts):
                        detalles = self._log_control_details(texto, index, "Text")
                        if detalles:
                            detalles['contenido_relevante'] = texto_content

                            self.save_file.guardar_coordenada_componente(texto, "Text", f"reports_{index}")

                            informes_encontrados[f"Text_Relacionado_{index}"] = detalles
                            index += 1
                            self.logger.info(f"   üìã TEXTO relacionado: {texto_content}")
                except Exception as e:
                    self.logger.debug(f"Error procesando texto: {e}")

            # Resumen final
            self.logger.info("\n" + "="*60)

            return informes_encontrados
            
        except Exception as e:
            self.logger.error(f"‚ùå Error extrayendo informes y gr√°ficos: {e}")
            return {}

    def _buscar_informes(self, index): 
        informes_encontrados = {}
        
        # Importar traducciones multiidioma
        from config.settings import get_all_possible_translations
        
        # Obtener t√©rminos de informes en todos los idiomas
        report_terms = get_all_possible_translations('ui_controls', 'reports')
        
        self.logger.info(f"\nüîò Buscando bot√≥n 'Informes' multiidioma...")
        self.logger.info(f"üåê T√©rminos de b√∫squeda: {report_terms}")

        def normalizar_para_busqueda(texto):
            """Normaliza texto para b√∫squeda multiidioma"""
            if not texto:
                return ""
            texto = texto.lower().strip()
            # Eliminar acentos y caracteres especiales
            texto = re.sub(r'[√°√†√§√¢]', 'a', texto)
            texto = re.sub(r'[√©√®√´√™]', 'e', texto)
            texto = re.sub(r'[√≠√¨√Ø√Æ]', 'i', texto)
            texto = re.sub(r'[√≥√≤√∂√¥]', 'o', texto)
            texto = re.sub(r'[√∫√π√º√ª]', 'u', texto)
            texto = re.sub(r'[^\w\s]', ' ', texto)
            texto = re.sub(r'\s+', ' ', texto)
            return texto.strip()

        def contiene_termino(texto):
            """Verifica si el texto contiene alg√∫n t√©rmino de informe"""
            texto_normalizado = normalizar_para_busqueda(texto)
            for termino in report_terms:
                termino_normalizado = normalizar_para_busqueda(termino)
                if termino_normalizado in texto_normalizado:
                    return True
            return False

        # Buscar botones de informes
        for i, button in enumerate(self.ventana_configuracion.descendants(control_type="Button")):
            try:
                texto = button.window_text().strip()
                if contiene_termino(texto):
                    detalles = self._log_control_details(button, index, "Button")
                    if detalles:
                        detalles['metodo_deteccion'] = "Por texto bot√≥n multiidioma"
                        detalles['termino_encontrado'] = texto
                        self.save_file.guardar_coordenada_componente(button, "Button", f"reports_{index}")

                        try:
                            self.logger.info(f"üñ±Ô∏è Haciendo clic en bot√≥n de informes: '{texto}'")
                            button.click_input()
                            time.sleep(1.2)  # Esperar men√∫ emergente

                            x, y = pyautogui.position()
                            move(coords=(x, y + 52))
                            time.sleep(0.5)
                            pyautogui.click(button='left')

                        except Exception as submenu_err:
                            self.logger.warning(f"‚ö†Ô∏è No se pudieron obtener los subelementos del bot√≥n 'Informes': {submenu_err}")

                        informes_encontrados[f"Button_Informes_{index}"] = detalles
                        index += 1
                        break  # Solo procesar el primer bot√≥n encontrado
            except Exception as e:
                self.logger.debug(f"Error en bot√≥n 'Informes': {e}")

        # Fallback: detectar por contenido visible con multiidioma
        if not informes_encontrados:
            buttons = self.ventana_configuracion.descendants(control_type="Button")
            for button in buttons:
                try:
                    texto_button = button.window_text().strip()
                    if contiene_termino(texto_button):
                        detalles = self._log_control_details(button, index, "Button")
                        if detalles:
                            detalles['funcionalidad'] = "Abre vista gr√°fica del an√°lisis"
                            detalles['metodo_deteccion'] = "Por contenido de texto multiidioma"
                            detalles['termino_encontrado'] = texto_button
                            self.save_file.guardar_coordenada_componente(button, "Button", f"reports_fallback_{index}")
                            
                            # Detectar si es CSV espec√≠ficamente
                            if any(term in texto_button.upper() for term in ['CSV']):
                                detalles['opcion_prioritaria'] = "Informe CSV"
                            
                            informes_encontrados[f"Button_Graficos_Contenido_{index}"] = detalles
                            index += 1
                            self.logger.info(f"‚úÖ BUTTON encontrado por contenido multiidioma: {texto_button}")
                            break
                except Exception as e:
                    self.logger.debug(f"Error procesando bot√≥n: {e}")

        return informes_encontrados

    def guardar_archivo_csv(self, nombre_archivo: str):
        """
        Guarda el archivo CSV usando √∫nicamente m√©todos de pywinauto sin coordenadas ni pyautogui.
        """
        try:
            self.logger.info(f"üíæ Guardando archivo CSV: {nombre_archivo}")
            time.sleep(2)

            # Obtener todas las traducciones posibles para 'save'
            save_terms = get_all_possible_translations('ui_controls', 'save')
            self.logger.info(f"üåê Buscando di√°logo 'Guardar' en t√©rminos: {save_terms}")
            
            if not self.app:
                self.logger.error("‚ùå No hay conexi√≥n con la aplicaci√≥n Sonel")
                return False

            guardar_ventana = None

            if hasattr(self, 'main_window') and self.main_window:
                dialogs = self.main_window.descendants(control_type="Window")
                for i, dialog in enumerate(dialogs):
                    try:
                        self._log_control_details(dialog, index=i, tipo_esperado="Dialogo candidato")
                        dialog_text = dialog.window_text()
                        
                        # Verificar si es di√°logo de guardar usando multiidioma
                        if (dialog.is_visible() and 
                            (TextUtils.texto_coincide(dialog_text, save_terms) or 
                            dialog.child_window(control_type="Button").exists())):
                            
                            # Verificar si tiene bot√≥n guardar
                            try:
                                for ctrl in dialog.descendants(control_type="Button"):
                                    if TextUtils.texto_coincide(ctrl.window_text(), save_terms):
                                        guardar_ventana = dialog
                                        print(f"‚úÖ Di√°logo de guardado encontrado: '{dialog_text}'")
                                        break
                            except:
                                pass
                            
                            if guardar_ventana:
                                break
                                
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è Di√°logo no procesado: {e}")

            if not guardar_ventana:
                print("‚ùå No se encontr√≥ ventana de guardado.")
                return False
            
            # Asegurar que la ventana est√© en primer plano
            try:
                guardar_ventana.set_focus()
                guardar_ventana.restore()
                time.sleep(1)
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è No se pudo enfocar la ventana: {e}")

            image_terms = get_all_possible_translations('ui_controls', 'image')
            self.logger.info(f"üåê Buscando campo relacionado con 'Im√°genes' en t√©rminos: {image_terms}")
        
            # Funci√≥n para verificar coincidencia con 'Im√°genes'
            def es_campo_imagenes(texto_control, lista_traducciones):
                """Verifica si el texto corresponde a 'Im√°genes' en cualquier idioma"""
                texto_normalizado = TextUtils.normalizar_texto(texto_control)
                for traduccion in lista_traducciones:
                    if TextUtils.normalizar_texto(traduccion) in texto_normalizado:
                        return True
                return False

            # Localizar el campo de texto "Nombre"
            campo_control = None

            for idx, ctrl in enumerate(guardar_ventana.descendants()):
                if isinstance(ctrl, EditWrapper):
                    try:
                        padre = ctrl.parent()
                        if padre and es_campo_imagenes(padre.window_text(), image_terms):
                            campo_control = ctrl
                            self._log_control_details(ctrl, index=idx, tipo_esperado="Campo Nombre (EditWrapper)")
                            
                            self.save_file.guardar_coordenada_componente(campo_control, "EditWrapper", "nombre_archivo")
                            break
                    except Exception as e:
                        self.logger.warning(f"‚ö†Ô∏è No se pudo evaluar padre de componente Edit #{idx}: {e}")

            if not campo_control:
                self.logger.error("‚ùå No se encontr√≥ el campo de nombre para guardar el archivo.")
                return False

            # Estrategia: M√©todo est√°ndar con verificaciones adicionales
            try:
                self.logger.info("üîÑ Estableciendo nombre del archivo...")
                # ‚úÖ Normalizar nombre del archivo
                nombre_archivo = nombre_archivo.strip()
                if "." in nombre_archivo:
                    partes = nombre_archivo.split(".")
                    nombre_sin_puntos = "".join(partes[:-1])  # quitar puntos del nombre
                    extension = partes[-1]
                    nombre_archivo = f"{nombre_sin_puntos}.{extension}"
                else:
                    self.logger.warning("‚ö†Ô∏è El nombre del archivo no conten√≠a una extensi√≥n expl√≠cita.")

                pyperclip.copy(nombre_archivo)

                # Verificar visibilidad antes de proceder
                if not campo_control.is_visible():
                    try:
                        campo_control.scroll_into_view()
                        time.sleep(0.2)
                    except:
                        pass
                
                # Intentar establecer foco m√∫ltiples veces
                for i in range(3):
                    try:
                        campo_control.set_focus()
                        time.sleep(0.2)
                        break
                    except Exception as e:
                        if i == 2:
                            raise e
                        time.sleep(0.3)

                campo_control.click_input(double=True)

                # Limpiar y escribir
                send_keys("^a{DEL}")
                time.sleep(0.2)
                send_keys("^v")
                time.sleep(0.2)

                self.logger.info(f"üìé Nombre establecido en el campo: {nombre_archivo}")
                
            except Exception as e:
                self.logger.error(f"‚ùå Error estableciendo nombre: {e}")
                return False

            time.sleep(0.5)

            # Localizar el bot√≥n "Guardar"
            boton_guardar_control = None

            save_terms = get_all_possible_translations('ui_controls', 'save')
            self.logger.info(f"üåê Buscando bot√≥n 'Guardar' en t√©rminos: {save_terms}")

            def es_boton_guardar(texto):
                """Verifica si el texto corresponde a un bot√≥n de guardar en cualquier idioma"""
                if not texto:
                    return False
                texto_normalizado = texto.strip().lower()
                for termino in save_terms:
                    if termino.lower() == texto_normalizado:
                        return True
                return False
            
            try:
                for idx, ctrl in enumerate(guardar_ventana.descendants(control_type="Button")):
                    if isinstance(ctrl, ButtonWrapper) and es_boton_guardar(ctrl.window_text()):
                        boton_guardar_control = ctrl
                        self._log_control_details(ctrl, index=idx, tipo_esperado="Bot√≥n Guardar (multiidioma)")
                        self.save_file.guardar_coordenada_componente(boton_guardar_control, "ButtonWrapper", "boton_guardar")
                        break
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è Error buscando bot√≥n 'Guardar': {e}")

            if not boton_guardar_control:
                self.logger.error("‚ùå No se encontr√≥ el bot√≥n 'Guardar'.")
                return False

            # Hacer clic en el bot√≥n Guardar
            try:
                boton_guardar_control.set_focus()
                time.sleep(0.2)
                boton_guardar_control.invoke()
                self.logger.info("‚úÖ Archivo CSV guardado correctamente usando pywinauto.")
                return True
            except Exception as e:
                self.logger.error(f"‚ùå Error al hacer clic en Guardar: {e}")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå Error general en guardar_archivo_csv: {e}")
            return False

    def _log_control_details(self, control, index, tipo_esperado=""):
        """Registra detalles del control"""
        try:
            texto = control.window_text()
            auto_id = getattr(control, 'automation_id', '') or ''
            class_name = getattr(control, 'class_name', '') or ''
            control_type = control.element_info.control_type
            rect = control.rectangle()
            
            self.logger.info(f"[{index}] {tipo_esperado}: {texto}")
            self.logger.info(f"  AUTO_ID: {auto_id}")
            self.logger.info(f"  RECT: (L{rect.left}, T{rect.top}, R{rect.right}, B{rect.bottom})")
            
            return {
                'texto': texto,
                'auto_id': auto_id,
                'class_name': class_name,
                'control_type': str(control_type),
                'rectangle': f"(L{rect.left}, T{rect.top}, R{rect.right}, B{rect.bottom})",
                'control': control
            }
            
        except Exception as e:
            self.logger.error(f"Error registrando control: {e}")
            return None