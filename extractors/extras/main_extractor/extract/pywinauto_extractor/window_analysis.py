import re
import time
import logging
import os
import traceback
import pyautogui
import pyperclip
from config.logger import logger
from time import sleep
from datetime import datetime
from pywinauto import Desktop, mouse, findwindows
from pywinauto import Application
from pyautogui import click, moveTo, position
from pywinauto.mouse import move
from pywinauto.keyboard import send_keys
from pynput.mouse import Button, Listener as MouseListener
from pywinauto.controls.uia_controls import EditWrapper, ButtonWrapper

class SonelAnalisisInicial:
    """Clase especializada para manejar la vista inicial de an√°lisis"""
    
    def __init__(self, parent_extractor):
        """
        Inicializa la clase con referencia al extractor principal
        
        Args:
            parent_extractor: Instancia del PywinautoExtractor principal
        """
        self.parent_extractor = parent_extractor
        self.archivo_pqm = parent_extractor.archivo_pqm
        self.ruta_exe = parent_extractor.sonel_exe_path
        self.delays = parent_extractor.delays
        
        self.app = None
        self.ventana_inicial = None

        logger.info("="*60)
        logger.info("üéØ EXTRACTOR VISTA INICIAL - SONEL ANALYSIS")
        logger.info(f"üìÅ Archivo PQM: {self.archivo_pqm}")
        logger.info("="*60)

    def conectar(self):
        """Conecta con la vista inicial de an√°lisis"""
        try:
            logger.info("üîç Conectando con vista inicial...")
            
            # Establecer conexi√≥n con la aplicaci√≥n
            try:
                self.app = Application(backend="uia").connect(title_re=".*An√°lisis.*")
                logger.info("‚úÖ Conectado con aplicaci√≥n existente")
            except:
                logger.info("üöÄ Iniciando nueva instancia...")
                self.app = Application(backend="uia").start(f'"{self.ruta_exe}" "{self.archivo_pqm}"')
                time.sleep(10)
            
            # Obtener ventana inicial espec√≠fica
            try:
                main_window = self.app.top_window()
                main_window.set_focus()
                
                # Buscar ventana que NO termine en "Configuraci√≥n 1"
                windows = main_window.descendants(control_type="Window")
                for window in windows:
                    try:
                        title = window.window_text()
                        if ("An√°lisis" in title and ".pqm" in title and title.strip() 
                            and not title.strip().endswith("Configuraci√≥n 1")):
                            self.ventana_inicial = window
                            logger.info(f"‚úÖ Vista inicial encontrada: {title}")
                            return True
                    except Exception:
                        continue
                
                # Fallback: usar ventana principal si cumple criterios
                main_title = main_window.window_text()
                if ("An√°lisis" in main_title and ".pqm" in main_title and main_title.strip() 
                    and not main_title.strip().endswith("Configuraci√≥n 1")):
                    self.ventana_inicial = main_window
                    logger.info(f"‚úÖ Vista inicial (main): {main_title}")
                    return True
                
                logger.error("‚ùå No se encontr√≥ vista inicial")
                return False
                
            except Exception as window_error:
                logger.error(f"‚ùå Error obteniendo ventana: {window_error}")
                return False
            
        except Exception as e:
            logger.error(f"‚ùå Error conectando vista inicial: {e}")
            return False

    def navegar_configuracion(self):
        """Navega al √°rbol de configuraci√≥n y expande 'Configuraci√≥n 1'"""
        try:
            logger.info("üå≥ Navegando √°rbol de configuraci√≥n...")
            
            if not self.ventana_inicial:
                logger.error("‚ùå No hay ventana inicial conectada")
                return False
            
            # Buscar TreeItem con "Configuraci√≥n 1"
            tree_controls = self.ventana_inicial.descendants(control_type="TreeItem")
            
            for tree in tree_controls:
                texto = tree.window_text()
                if "Configuraci√≥n 1" in texto or "Configuration 1" in texto:
                    logger.info(f"‚úÖ TreeItem encontrado: {texto}")
                    return self._expandir_configuracion(tree)
            
            logger.error("‚ùå TreeItem 'Configuraci√≥n 1' no encontrado")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Error navegando configuraci√≥n: {e}")
            return False

    def _expandir_configuracion(self, config_item):
        """Expande el elemento de configuraci√≥n"""
        try:
            rect = config_item.rectangle()
            center_x = (rect.left + rect.right) // 2
            center_y = (rect.top + rect.bottom) // 2
            
            pyautogui.click(center_x, center_y)
            time.sleep(0.5)
            
            logger.info(f"üîì Click en configuraci√≥n ({center_x}, {center_y})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error expandiendo configuraci√≥n: {e}")
            return False

    def ejecutar_analisis(self):
        """Hace clic en el bot√≥n 'An√°lisis de datos'"""
        try:
            logger.info("üéØ Ejecutando an√°lisis de datos...")
            
            # Buscar bot√≥n "An√°lisis de datos"
            buttons = self.ventana_inicial.descendants(control_type="Button", title="An√°lisis de datos")
            if not buttons:
                buttons = self.ventana_inicial.descendants(control_type="Button", title="Data Analysis")
            
            if buttons:
                analysis_button = buttons[0]
                analysis_button.click()
                time.sleep(2)  # Esperar a que se abra la ventana de configuraci√≥n
                
                logger.info("‚úÖ An√°lisis de datos ejecutado")
                return True
            else:
                logger.error("‚ùå Bot√≥n 'An√°lisis de datos' no encontrado")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error ejecutando an√°lisis: {e}")
            return False

    def get_app_reference(self):
        """Retorna la referencia de la aplicaci√≥n para usar en la segunda clase"""
        return self.app
    
    def configuracion_primera_ventana(self):
        """
        Configura la primera ventana de an√°lisis con las opciones requeridas
        
        Returns:
            bool: True si la configuraci√≥n fue exitosa
        """
        try:
            # Esperar a que aparezca la nueva ventana
            logger.info("‚è≥ Esperando carga de ventana de an√°lisis...")
            time.sleep(self.delays['window_activation'])
            
            # FASE 1: Vista inicial
            logger.info("\n--- FASE 1: VISTA INICIAL ---")

            if not self.conectar():
                logger.error("‚ùå Error conectando vista inicial")
                return None
            
            if not self.navegar_configuracion():
                logger.error("‚ùå Error navegando configuraci√≥n")
                return None
            
            if not self.ejecutar_analisis():
                logger.error("‚ùå Error ejecutando an√°lisis")
                return None
            
            logger.info("‚úÖ Configuraci√≥n de primera ventana completada")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error configurando primer ventana: {e}")
            logger.error(f"‚ùå Detalles del error: {type(e).__name__}")
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return False