import os
import time
import pyautogui
from pathlib import Path
from config.logger import logger
from config.settings import get_coordinates, get_delays
from utils.gui_helpers import GUIHelpers
from utils.file_helpers import FileHelpers


class ExportController:
    """
    Controlador para configuraci√≥n de mediciones y exportaci√≥n de datos desde Sonel Analysis
    """
    
    def __init__(self, config):
        self.config = config
        self.coordinates = get_coordinates()
        self.delays = get_delays()
        self.export_dir = config['PATHS'].get('export_dir', 'D:/Universidad/8vo Semestre/Practicas/Sonel/data/archivos_csv')
        self.debug_mode = config.get('debug_mode', False)
        
        # Asegurar que el directorio de exportaci√≥n existe
        FileHelpers.ensure_directory_exists(self.export_dir)

    def configure_measurements_and_export(self, pqm_file_path):
        """
        Navega en la GUI de Sonel para seleccionar configuraciones espec√≠ficas y exportar los datos
        
        Args:
            pqm_file_path: Ruta del archivo .pqm original para generar nombre del CSV
            
        Returns:
            str: Ruta del archivo CSV exportado o None si hay error
        """
        try:
            # Generar nombre del archivo CSV basado en el archivo .pqm
            csv_base_name = FileHelpers.generate_csv_filename(
                pqm_file_path, 
                cleanup_enabled=self.config.get('FILES', {}).get('filename_cleanup', True)
            )
            
            csv_filename = f"{csv_base_name}.csv"
            csv_full_path = os.path.join(self.export_dir, csv_filename)
            
            logger.info(f"üîß Configurando mediciones para: {os.path.basename(pqm_file_path)}")
            GUIHelpers.debug_log(f"Archivo de destino: {csv_full_path}", self.debug_mode)
            
            # Paso 1: Navegaci√≥n por men√∫s principales
            if not self._navigate_to_measurements():
                logger.error("‚ùå Fall√≥ navegaci√≥n a mediciones")
                return None
            
            # Paso 2: Configurar selecciones espec√≠ficas
            if not self._configure_measurement_selections():
                logger.error("‚ùå Fall√≥ configuraci√≥n de selecciones")
                return None
                
            # Paso 3: Ejecutar exportaci√≥n
            if not self._execute_export(csv_full_path):
                logger.error("‚ùå Fall√≥ exportaci√≥n")
                return None
            
            # Paso 4: Verificar archivo exportado
            if self._verify_exported_file(csv_full_path):
                logger.info(f"‚úÖ Exportaci√≥n exitosa: {csv_filename}")
                return csv_full_path
            else:
                logger.error(f"‚ùå No se pudo verificar archivo exportado: {csv_filename}")
                return None
                
        except Exception as e:
            logger.error(f"Error durante configuraci√≥n y exportaci√≥n: {e}")
            return None

    def _navigate_to_measurements(self):
        """
        Navega a trav√©s de los men√∫s principales hasta llegar a mediciones
        
        Returns:
            bool: True si la navegaci√≥n es exitosa
        """
        try:
            GUIHelpers.debug_log("Iniciando navegaci√≥n a mediciones", self.debug_mode)
            
            # Secuencia de navegaci√≥n principal
            navigation_steps = [
                (self.coordinates['config_1'], "Config 1", self.delays['after_menu']),
                (self.coordinates['analisis_datos'], "An√°lisis de Datos", self.delays['after_menu']),
                (self.coordinates['mediciones'], "Mediciones", self.delays['after_menu'])
            ]
            
            for coords, description, delay in navigation_steps:
                if not GUIHelpers.safe_click(
                    coords[0], coords[1], 
                    description, 
                    delay_after=delay, 
                    debug_mode=self.debug_mode
                ):
                    logger.error(f"‚ùå Fall√≥ paso de navegaci√≥n: {description}")
                    return False
                    
                logger.info(f"‚úÖ Navegaci√≥n completada: {description}")
            
            GUIHelpers.debug_log("Navegaci√≥n a mediciones completada", self.debug_mode)
            return True
            
        except Exception as e:
            logger.error(f"Error navegando a mediciones: {e}")
            return False

    def _configure_measurement_selections(self):
        """
        Configura las selecciones espec√≠ficas de mediciones
        
        Returns:
            bool: True si la configuraci√≥n es exitosa
        """
        try:
            GUIHelpers.debug_log("Configurando selecciones de mediciones", self.debug_mode)
            
            # Configuraciones espec√≠ficas de mediciones
            selection_steps = [
                (self.coordinates['check_usuario'], "Checkbox usuario", self.delays['between_clicks']),
            ]
            
            for coords, description, delay in selection_steps:
                if not GUIHelpers.safe_click(
                    coords[0], coords[1], 
                    description, 
                    delay_after=delay,
                    debug_mode=self.debug_mode
                ):
                    logger.error(f"‚ùå Fall√≥ configuraci√≥n: {description}")
                    return False
                    
                logger.info(f"‚úÖ Configuraci√≥n aplicada: {description}")
            
            # Confirmar selecci√≥n haciendo clic en la esquina de la tabla
            if not GUIHelpers.safe_click(
                self.coordinates['tabla_esquina'][0], 
                self.coordinates['tabla_esquina'][1], 
                "Confirmar selecci√≥n tabla",
                delay_after=self.delays['before_export'],
                debug_mode=self.debug_mode
            ):
                logger.error("‚ùå Fall√≥ confirmaci√≥n de selecci√≥n")
                return False
            
            logger.info("‚úÖ Selecciones de mediciones configuradas")
            return True
            
        except Exception as e:
            logger.error(f"Error configurando selecciones: {e}")
            return False

    def _execute_export(self, csv_full_path):
        """
        Ejecuta el proceso de exportaci√≥n a CSV
        
        Args:
            csv_full_path: Ruta completa donde guardar el archivo CSV
            
        Returns:
            bool: True si la exportaci√≥n se ejecuta correctamente
        """
        try:
            GUIHelpers.debug_log("Iniciando proceso de exportaci√≥n", self.debug_mode)
            
            # Navegar a men√∫ de exportaci√≥n
            export_navigation = [
                (self.coordinates['informes'], "Men√∫ Informes", self.delays['after_menu']),
                (self.coordinates['exportar_csv'], "Exportar CSV", self.delays['after_menu'])
            ]
            
            for coords, description, delay in export_navigation:
                if not GUIHelpers.safe_click(
                    coords[0], coords[1], 
                    description, 
                    delay_after=delay,
                    debug_mode=self.debug_mode
                ):
                    logger.error(f"‚ùå Fall√≥ navegaci√≥n de exportaci√≥n: {description}")
                    return False
                    
                logger.info(f"‚úÖ Navegaci√≥n exportaci√≥n: {description}")
            
            # Configurar nombre del archivo en el di√°logo de guardado
            if not self._configure_export_filename(csv_full_path):
                logger.error("‚ùå Fall√≥ configuraci√≥n del nombre de archivo")
                return False
            
            logger.info("‚úÖ Proceso de exportaci√≥n ejecutado")
            return True
            
        except Exception as e:
            logger.error(f"Error ejecutando exportaci√≥n: {e}")
            return False

    def _configure_export_filename(self, csv_full_path):
        """
        Configura el nombre del archivo en el di√°logo de exportaci√≥n
        
        Args:
            csv_full_path: Ruta completa del archivo a guardar
            
        Returns:
            bool: True si se configura correctamente el nombre
        """
        try:
            GUIHelpers.debug_log(f"Configurando nombre de archivo: {csv_full_path}", self.debug_mode)
            
            # Hacer clic en el campo de nombre de archivo
            if not GUIHelpers.safe_click(
                self.coordinates['dialogo_nombre'][0], 
                self.coordinates['dialogo_nombre'][1], 
                "Campo nombre archivo", 
                delay_after=self.delays['file_naming'],
                debug_mode=self.debug_mode
            ):
                logger.error("‚ùå No se pudo acceder al campo de nombre")
                return False
            
            # Escribir la ruta completa del archivo
            if not GUIHelpers.write_text_safely(
                csv_full_path,
                clear_first=True,
                delay_after=0.5
            ):
                logger.error("‚ùå No se pudo escribir el nombre del archivo")
                return False
            
            logger.info(f"üíæ Configurado nombre de archivo: {os.path.basename(csv_full_path)}")
            
            # Confirmar guardado
            if not GUIHelpers.send_hotkey('enter', delay_after=self.delays['after_export']):
                logger.error("‚ùå No se pudo confirmar el guardado")
                return False
            
            logger.info("‚úÖ Nombre de archivo configurado y confirmado")
            return True
            
        except Exception as e:
            logger.error(f"Error configurando nombre de archivo: {e}")
            return False

    def _verify_exported_file(self, csv_full_path, max_attempts=8, min_file_size=100):
        """
        Verifica que el archivo haya sido exportado correctamente
        
        Args:
            csv_full_path: Ruta completa del archivo a verificar
            max_attempts: N√∫mero m√°ximo de intentos de verificaci√≥n
            min_file_size: Tama√±o m√≠nimo esperado del archivo en bytes
            
        Returns:
            bool: True si el archivo se export√≥ correctamente
        """
        try:
            GUIHelpers.debug_log(f"Verificando archivo exportado: {csv_full_path}", self.debug_mode)
            
            verification_attempts = 0
            
            while verification_attempts < max_attempts:
                # Verificar si el archivo existe
                file_exists, validation_message = FileHelpers.validate_file_exists(
                    csv_full_path, 
                    min_size_bytes=min_file_size
                )
                
                if file_exists:
                    file_size_str = FileHelpers.get_file_size_formatted(csv_full_path)
                    logger.info(f"‚úÖ Archivo verificado: {os.path.basename(csv_full_path)} ({file_size_str})")
                    return True
                else:
                    GUIHelpers.debug_log(
                        f"Verificaci√≥n {verification_attempts + 1}/{max_attempts}: {validation_message}", 
                        self.debug_mode
                    )
                
                verification_attempts += 1
                time.sleep(self.delays['file_verification'])
            
            logger.error(f"‚ùå No se pudo verificar archivo despu√©s de {max_attempts} intentos: {csv_full_path}")
            return False
            
        except Exception as e:
            logger.error(f"Error verificando archivo exportado: {e}")
            return False

    def export_single_measurement(self, pqm_file_path, measurement_config=None):
        """
        Exporta una medici√≥n espec√≠fica con configuraci√≥n personalizada
        
        Args:
            pqm_file_path: Ruta del archivo .pqm original
            measurement_config: Configuraci√≥n espec√≠fica de medici√≥n (opcional)
            
        Returns:
            str: Ruta del archivo CSV exportado o None si hay error
        """
        try:
            logger.info(f"üéØ Exportaci√≥n espec√≠fica para: {os.path.basename(pqm_file_path)}")
            
            # Si se proporciona configuraci√≥n espec√≠fica, aplicarla
            if measurement_config:
                GUIHelpers.debug_log(f"Aplicando configuraci√≥n espec√≠fica: {measurement_config}", self.debug_mode)
                # Aqu√≠ se pueden agregar configuraciones espec√≠ficas en el futuro
            
            # Usar el m√©todo principal de configuraci√≥n y exportaci√≥n
            return self.configure_measurements_and_export(pqm_file_path)
            
        except Exception as e:
            logger.error(f"Error en exportaci√≥n espec√≠fica: {e}")
            return None

    def batch_export_measurements(self, pqm_files_list):
        """
        Exporta m√∫ltiples mediciones en lote
        
        Args:
            pqm_files_list: Lista de rutas de archivos .pqm
            
        Returns:
            list: Lista de rutas de archivos CSV exportados exitosamente
        """
        try:
            logger.info(f"üì¶ Iniciando exportaci√≥n en lote para {len(pqm_files_list)} archivos")
            
            exported_files = []
            failed_exports = []
            
            for i, pqm_file in enumerate(pqm_files_list, 1):
                logger.info(f"üìÅ Procesando archivo {i}/{len(pqm_files_list)}: {os.path.basename(pqm_file)}")
                
                csv_path = self.configure_measurements_and_export(pqm_file)
                
                if csv_path:
                    exported_files.append(csv_path)
                    logger.info(f"‚úÖ Exportado {i}/{len(pqm_files_list)}")
                else:
                    failed_exports.append(pqm_file)
                    logger.error(f"‚ùå Fall√≥ exportaci√≥n {i}/{len(pqm_files_list)}")
                
                # Pausa entre archivos si no es el √∫ltimo
                if i < len(pqm_files_list):
                    GUIHelpers.stabilization_pause(
                        self.delays.get('between_files', 2),
                        file_number=i,
                        total_files=len(pqm_files_list)
                    )
            
            # Resumen final
            logger.info(f"üìä Exportaci√≥n en lote completada:")
            logger.info(f"   ‚úÖ Exitosos: {len(exported_files)}")
            logger.info(f"   ‚ùå Fallidos: {len(failed_exports)}")
            
            if failed_exports:
                logger.warning("‚ùå Archivos que fallaron:")
                for failed_file in failed_exports:
                    logger.warning(f"   - {os.path.basename(failed_file)}")
            
            return exported_files
            
        except Exception as e:
            logger.error(f"Error en exportaci√≥n en lote: {e}")
            return exported_files if 'exported_files' in locals() else []

    def get_export_statistics(self):
        """
        Obtiene estad√≠sticas del directorio de exportaci√≥n
        
        Returns:
            dict: Estad√≠sticas de archivos exportados
        """
        try:
            csv_files = FileHelpers.get_files_by_extension(self.export_dir, '.csv', sort_files=True)
            
            total_size = 0
            for csv_file in csv_files:
                if os.path.exists(csv_file):
                    total_size += os.path.getsize(csv_file)
            
            stats = {
                'total_files': len(csv_files),
                'total_size_bytes': total_size,
                'total_size_formatted': f"{total_size:,} bytes",
                'export_directory': self.export_dir,
                'recent_files': [os.path.basename(f) for f in csv_files[-5:]]  # √öltimos 5
            }
            
            GUIHelpers.debug_log(f"Estad√≠sticas de exportaci√≥n: {stats}", self.debug_mode)
            return stats
            
        except Exception as e:
            logger.error(f"Error obteniendo estad√≠sticas de exportaci√≥n: {e}")
            return {
                'total_files': 0,
                'total_size_bytes': 0,
                'total_size_formatted': '0 bytes',
                'export_directory': self.export_dir,
                'recent_files': [],
                'error': str(e)
            }